---
title: "KAIST IAM Group"
date : last-modified # now
author: 
 - name: "안지석"
   affiliation: "KAIST ITM"
title-block-banner: true
format: 
  html:
    theme: flatly
    code-fold: true
    toc: true
    toc-depth: 2
    toc-title: 목차
    number-sections : true
    highlight-style: github
    self-contained: false
execute: 
  freeze: true
---

# Core Model Proposal #359: Hydrogen and transportation technology update

## Transportation

-   Natural Gas Vehicles(NGV)
-   Light-duty vehicles
    -   지역별로 LDV의 사이즈를 4개씩 구분하였고, 각각의 배터리 용량(kwh poer vehicle) 제시
    -   BEV battery pack costs는 2020 BNEF EV Outlook에서 가져옴
    -   cost mark-up??
    -   Fuel cell stack costs는 [NREL, 2020 Transportation Annual Technology Baseline](https://atb.nrel.gov/transportation/2020/index)에서 가져옴

## transportation_UCD_CORE_CurPol_Korea_Dawoon

-   region : South Korea
    -   supplysector :
        -   항공 :
            -   aviation_intl
        -   화물 :
            -   freight
            -   freight_road
        -   여객 :
            -   pass_road
            -   pass_road_LDV
            -   pass_road_LDV_4W
        -   해운 :
            -   shipping_intl
    -   energy_final_demand
        -   항공:
            -   aviation_intl
        -   화물:
            -   freight
        -   여객:
            -   pass
        -   해운:
            -   shipping_intl

<br>

-   gcam-7의 transportation_UCD_CORE.xml과 비교해보니, supplysector, energy-final-demand의 구성 name은 동일함
-   The most common failure to run GCAM when double clicking the run-gcam executable script typically relate to Java.
-   model running 테스트 -\> `All model periods solved correctly.`

![스크린샷](./img/solved_correctly.png)

-   Model run 결과는 exe - log - main_log.txt 에서 확인 가능
-   output - queries
-   ModelInterface - run-model-interface.bat

![Model interface](./img/model_interface.png) \### transportation

![](./img/modelinterface_trn.png)

# 2023-08-21 meeting with prof.Jeon

-   GCAM7에는 trn_freight_road(트럭)에 hybrid 추가됨. Dawoon 파일에는 hybrid 없음
-   Created new xml configuration by adding lines

::: callout-note
for `<Configuration>` `<Value name = "transport">../input/gcamdata/xml/transportation_UCD_SSP1.xml</Value>`
:::

::: callout-important
## 분석기간을 2100년이 아닌 2050년까지만 보고싶은데;;; 오류남.

for stop year `<Value name="stop-year">2050</Value>` -\> DOESN'T WORK!!!
:::

-   Saved as `configuration_transportation_SSP1.xml` for backup

-   Again, saved it as `configuration.xlm` cause `run-batct.cat` in exe folder take `configuration.xlm`(not configuration_transporation_SSP1.xml) as input file

-   run model ![model](./img/model_solved.png)

-   for checking model results, go to Modelinterface folder, and click `run-model-interface.bat` and File - Open -DB Open

![model run result](./img/model_interface_2.png)

-   configuration.xml 파일에 `vale name = solver` 밑에 새로운 `value name = transport` 추가

![](./img/value_name.png)

```{r}



```

# 2023-08-22

### git bash or tortoiseGit?

-   Instead of using `tortoiseGit`, I hope to use `git bash`. Running `tortoise git` takes quite a long time when targeted `.xml` files are heavy. For using, CLI(Command line interface) needs to be learned. But, steep learning curve :(

### git diff

Show changes between commits, commit and working tree, etc

-   Tried to use `git diff` to see difference between versions in a file.
    1.  moved `transportation_UCD_CORE.xml` into a test folder

    2.  modified a `speed` in 2020 from 450 to 500 for make a difference. and then saved it.

![](./img/diff_test.png)

3.  Result. We can find a difference without add or commit. just typing `git diff` gives the difference.

![](./img/diff_test_result.png)

4.Modified `speed` in 2030, 2035 and typed `git diff` again. Same as 2.

![](./img/git_diff_result2.png)

5.  Commit `git commit` and track my log using `git log`

![](./img/git_log.png)

6.  what's next? reset? revert?

-   DAC file

# 2023-08-29

-   수송분야 transport.configuration_transportation_dawoon.xml

## Representation of H2 in GCAM

-   Tried to make a flow chart of hydrogen in GCAM using `mermaid`

::: column-page
```{mermaid}
flowchart TD
  Electricity --> H2centralproduction
  Electricity --> H2wholesaledispensing
  Electricity --> H2industrial
  Wind --> H2centralproduction
  Solar --> H2centralproduction
  Coal --> H2centralproduction
  Nuclear --> H2centralproduction
  Gas --> H2centralproduction
  Gas --> H2wholesaledispensing
  H2centralproduction --> H2deliverytrack
  H2centralproduction --> H2pipeline
  H2deliverytrack --> H2wholesaledelivery
  H2deliverytrack --> H2wholesaledispensing
  H2pipeline --> H2wholesaledelivery 
  H2pipeline --> H2wholesaledispensing
  H2wholesaledelivery --> H2rentaldelivery
  H2wholesaledelivery --> H2industrial
  H2rentaldelivery --> CommercialBuildings
  H2rentaldelivery --> ResidentialBuildings
  H2industrial --> AmmoniaProduction
  H2industrial --> IronandSteelProduction
  H2industrial --> IndustrialEnergyUse
  H2wholesaledispensing --> AgriculturalMachinery
  H2wholesaledispensing --> ConstruntionEquipment
  H2wholesaledispensing --> MiningEquipment
  H2wholesaledispensing --> H2rentaldispensing
  H2rentaldispensing --> HeavyDutyTrucks
  H2rentaldispensing --> LightDutyVehicles
  H2rentaldispensing --> AirTransport
  H2rentaldispensing --> RailTransport
  H2rentaldispensing --> ShipTransport
```
:::

# 2023-08-31

## to do

-   Comparing dac_ssp2 and dac_ssp_x3
-   `transportation_UCD_CORE.xml` in GCAM7 // `transportation_UCD_CORE_CurPol_KOREA_Dawoon.xml`, `transportation_UCD_CORE_NetZero_KOREA_Dawoon.xml` in GCAM-KAIST2.0

## success


??gcamextractor
-   discovery of `library(gcamaextractor)`

- `gcamextractor` is R package used to extract and process GCAM data and manipulate into standardized tables. gcamextractor converts GCAM outputs into commonly used units as well as aggregates across different classes and sectors for easy use in plots, maps and tables. See [Details](https://jgcri.github.io/gcamextractor/articles/vignette_parameters.html).



```{r}
library(gcamextractor)

gcamextractor::params # view available parameters
gcamextractor::queries # Get all queries used



#gcamextractor::map_param_query # Get a table of params and the relevants queries used to extract and calculate them.

# dataGCAM <- gcamextractor::readgcam(gcamdatabase = path_to_gcam_database,
#                                    paramsSelect = c("emissCO2BySector", 
#                                        "emissCO2BySectorNoBio"), ### this is a key
#                                    scenOrigNames = c('reference_with_dac_ssp_2',
#                                                      'reference_with_dac_ssp_2_x3'),
#                                    regionsSelect = c("South Korea"),
#                                    folder = "test_folder")
#

```




-   line charts

## failure

-   run a model with `transportation_UCD_CORE.xml`(default file in GCAM7.0) -\> worked!

-   run a model with `transportation_UCD_CORE_CurPol_KOREA_Dawoon.xml` -\> error!

- Tried to find a way to see the differences in different XML files in R. What is the best way to see the structure of XML? and easy way to do `diff`?

- Tried to run `library(rgcam)` but... failed. need to explore more.

::: callout-important
## erorr message

-   Unknown tag: loadFactor encountered while processing period\
-   Market info object cannot be returned because market H2 enduse in XX does not exit\
-   Called for price of non-existant market H2 enduse in region XX\
:::

### Let's cheack the difference btw dac_ssp2 and dap_ssp2_x3 scenario


:::{.callout-note} 
## common value applied for two dac_ssp2 & dap_ssp2_x3 comparison

-   <Value name = "1p5">../input/Korea/1p5-incr-UC-kor-LUC-Kwangnam.xml</Value> 
-   <Value name = "GHG_link_Korea">../input/Korea/GHG_link_Kor.xml</Value> \
-   <Value name = "world_deeper_decarbonization_2050">../input/Korea/FFI-const-row-deeper-decarb-2050-1p5-6000-Linear.xml</Value> \
-   <Value name = "GHG_link_row">../input/Korea/PCT_CO2_LUC_link_p10_row.xml</Value>\

:::

Based on the scenarios described above, ran a model to see the different results caused by two dac scenarios. `dac_ssp2` and `dac_ssp2_x3`




```{r}
library(readxl)
library(tidyverse)
library(gghighlight)

dac_data<- read_excel('./KAIST_IAM_GROUP/results.xlsx')

data_tidy<- dac_data %>% 
    select(-scenario, -region) %>% 
    relocate(type, query) %>% 
    pivot_longer(-c('type', 'query', 'sector'), names_to ="year", values_to = "MTC") %>% 
    mutate( year = as.numeric(year))

data_tidy %>% 
    filter(query == "sequestration") %>% 
    ggplot(aes(x= year, y = MTC, group = sector, color = type))+
    geom_line()+
    facet_wrap(~sector)+
    labs(title= "Comparison between scenario dap_ssp2 and dap_ssp_x3")

data_tidy %>% 
    filter(query == "emission") %>% 
    ggplot(aes(x= year, y = MTC, group = sector, color = type))+
    geom_line()+
    facet_wrap(~type)+
    labs(title= "Comparison between scenario dap_ssp2 and dap_ssp_x3")

```

### Results

-   I used `library(gcamextractor)` to ease data manipulation burden and make the differences in result more visible.

-   the results from two scenarios showed no big differences (the results are almost identical)

-   We can also see from the figure below that it seems like there is only one scenario not two.

![](KAIST_IAM_GROUP/withBio.png)

![](KAIST_IAM_GROUP/noBio.png)



-  make a chart using `library(rchart)`


![](KAIST_IAM_GROUP/chart_param.png)

![](KAIST_IAM_GROUP/chart_class.png)

