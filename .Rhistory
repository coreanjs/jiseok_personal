dac_data %>%
select(-scenario, -region) %>%
relocate(type)
dac_data %>%
select(-scenario, -region) %>%
relocate(type) %>%
pivot_longer(-c('type', 'sector'), names_to ="year", values_to "MTC")
dac_data %>%
select(-scenario, -region) %>%
relocate(type) %>%
pivot_longer(-c('type', 'sector'), names_to ="year", values_to = "MTC")
dac_data %>%
select(-scenario, -region) %>%
relocate(type, query) %>%
pivot_longer(-c('type', 'sector'), names_to ="year", values_to = "MTC")
dac_data %>%
select(-scenario, -region) %>%
relocate(type, query)
dac_data %>%
select(-scenario, -region) %>%
relocate(type, query) %>%
pivot_longer(-c('type', 'query', 'sector'), names_to ="year", values_to = "MTC")
data_tidy<- dac_data %>%
select(-scenario, -region) %>%
relocate(type, query) %>%
pivot_longer(-c('type', 'query', 'sector'), names_to ="year", values_to = "MTC")
data_tidy
data_tidy %>%
filter(query = emission)
data_tidy %>%
filter(query == "emission")
data_tidy<- dac_data %>%
select(-scenario, -region) %>%
relocate(type, query) %>%
pivot_longer(-c('type', 'query', 'sector'), names_to ="year", values_to = "MTC") %>%
mutate( year = as.numeric(year))
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= ))
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = sector))+
geom_line()+
facet_wrap(~type)
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = sector))+
geom_line()+
facet_wrap(~type)
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = sector))+
geom_line()+
gghighlight()+
facet_wrap(~type)
library(gghighlight)
dac_data<- read_excel('./KAIST_IAM_GROUP/results.xlsx')
data_tidy<- dac_data %>%
select(-scenario, -region) %>%
relocate(type, query) %>%
pivot_longer(-c('type', 'query', 'sector'), names_to ="year", values_to = "MTC") %>%
mutate( year = as.numeric(year))
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = sector))+
geom_line()+
gghighlight()+
facet_wrap(~type)
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC))+
geom_line()+
gghighlight()+
facet_grid(sector~type)
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = sector))+
geom_line()+
gghighlight()+
facet_wrap(~type)
data_tidy %>%
filter(query == "emission" & type =="SSP2") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = sector))+
geom_line()+
gghighlight()+
facet_wrap(~type)
data_tidy %>%
filter(query == "emission" & type =="SSP2") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = sector))+
geom_line()+
gghighlight()+
facet_wrap(~sector)
data_tidy %>%
filter(query == "emission" & type =="SSP2") %>%
ggplot(aes(x= year, y = MTC))+
geom_line()+
gghighlight()+
facet_wrap(~sector)
data_tidy %>%
filter(query == "emission" & type =="SSP2") %>%
ggplot(aes(x= year, y = MTC, group = type))+
geom_line()+
gghighlight(unhighlighted_params = )+
facet_wrap(~sector)
data_tidy %>%
filter(query == "emission" & type =="SSP2") %>%
ggplot(aes(x= year, y = MTC, group = sector))+
geom_line()+
gghighlight(unhighlighted_params = )+
facet_wrap(~sector)
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector), color = type)+
geom_line()+
gghighlight(unhighlighted_params = )+
facet_wrap(~sector)+
labs(title)
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector), color = type)+
geom_line()+
gghighlight()+
facet_wrap(~sector)+
labs(title)
data_tidy %>%
filter(query == "emission")
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector), color = type)+
geom_line()+
facet_wrap(~sector)+
labs(title)
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector), color = type)+
geom_line()+
facet_wrap(~sector)+
labs(title= "comparison between scenario dap_ssp2 and dap_ssp_x3")
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = type))+
geom_line()+
facet_wrap(~sector)+
labs(title= "Comparison between scenario dap_ssp2 and dap_ssp_x3")
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = type))+
geom_line()+
facet_wrap(~sector)+
labs(title= "Comparison between scenario dap_ssp2 and dap_ssp_x3")
data_tidy %>%
filter(query == "emission")
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = type))+
geom_line()
data_tidy<- dac_data %>%
select(-scenario, -region) %>%
relocate(type, query) %>%
pivot_longer(-c('type', 'query', 'sector'), names_to ="year", values_to = "MTC") %>%
mutate( year = as.numeric(year))
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = type))+
geom_line()+
facet_wrap(~sector)+
labs(title= "Comparison between scenario dap_ssp2 and dap_ssp_x3")
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = type))+
geom_line()+
facet_wrap(~type)
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = type))+
geom_line()+
facet_wrap(~type)+
labs(title= "Comparison between scenario dap_ssp2 and dap_ssp_x3")
data_tidy %>%
filter(query == "emission")
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = query))+
geom_line()+
facet_wrap(~type)+
labs(title= "Comparison between scenario dap_ssp2 and dap_ssp_x3")
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = type, color = type))+
geom_line()+
facet_wrap(~type)+
labs(title= "Comparison between scenario dap_ssp2 and dap_ssp_x3")
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = type))+
geom_line()+
facet_wrap(~type)+
labs(title= "Comparison between scenario dap_ssp2 and dap_ssp_x3")
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = sector))+
geom_line()+
facet_wrap(~type)+
labs(title= "Comparison between scenario dap_ssp2 and dap_ssp_x3")
data_tidy %>%
filter(query == "emission") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = type))+
geom_line()+
facet_wrap(~type)+
labs(title= "Comparison between scenario dap_ssp2 and dap_ssp_x3")
data_tidy
data_tidy
data_tidy %>%
filter(query == "sequestration") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = type))+
geom_line()+
facet_wrap(~type)+
labs(title= "Comparison between scenario dap_ssp2 and dap_ssp_x3")
data_tidy %>%
filter(query == "sequestration") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = type))+
geom_line()+
facet_grid(query~type)+
labs(title= "Comparison between scenario dap_ssp2 and dap_ssp_x3")
data_tidy %>%
filter(query == "sequestration")
data_tidy %>%
filter(query == "sequestration") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = type))+
geom_line()+
facet_grid(sector~type)+
labs(title= "Comparison between scenario dap_ssp2 and dap_ssp_x3")
data_tidy %>%
filter(query == "sequestration") %>%
ggplot(aes(x= year, y = MTC, group = sector, color = type))+
geom_line()+
facet_wrap(~sector)+
labs(title= "Comparison between scenario dap_ssp2 and dap_ssp_x3")
path_to_gcam_database <- "E:/gcam-v7.0-Windows-Release-Package/output/database_basexdb.0"
gcamextractor::params # view available parameters
gcamextractor::queries # Get all queries used
gcamextractor::map_param_query # Get a table of params and the relevants queries used to extract and calculate them.
gcamextractor::gcamextractor_test_data
dataGCAM$scenarios[4:5]
#### 돌리는 데 최소 20분 걸림 주의!!!!!!!!!!
dataGCAM <- gcamextractor::readgcam(gcamdatabase = path_to_gcam_database,
paramsSelect = paramsAll,
c("emissCO2BySector",
"emissCO2BySectorNoBio",
), ### this is a key
scenOrigNames = c('reference_with_dac_ssp_2', 'reference_with_dac_ssp_2_x3'),
regionsSelect = c("South Korea"),
folder = "test_folder")
#### 돌리는 데 최소 20분 걸림 주의!!!!!!!!!!
dataGCAM <- gcamextractor::readgcam(gcamdatabase = path_to_gcam_database,
paramsSelect = c("emissCO2BySector",
"emissCO2BySectorNoBio",
), ### this is a key
scenOrigNames = c('reference_with_dac_ssp_2', 'reference_with_dac_ssp_2_x3'),
regionsSelect = c("South Korea"),
folder = "test_folder")
#### 돌리는 데 최소 20분 걸림 주의!!!!!!!!!!
dataGCAM <- gcamextractor::readgcam(gcamdatabase = path_to_gcam_database,
paramsSelect = c("emissCO2BySector",
"emissCO2BySectorNoBio"), ### this is a key
scenOrigNames = c('reference_with_dac_ssp_2', 'reference_with_dac_ssp_2_x3'),
regionsSelect = c("South Korea"),
folder = "test_folder")
# View your data
df <- dataGCAM$data; df
dfParam <- dataGCAM$dataAggParam; dfParam
dfClass1 <- dataGCAM$dataAggClass1; dfClass1
unique(dataGCAM$dataAggParam$param)
unique(dataGCAM$dataAggClass1$param)
unique(dataGCAM$dataAggClass2$param)
dfClass1$param
unique(dfClass1$subRegion)
unique(dfClass1$scenario)
# rchart
data_chart <- dfClass1 %>%
dplyr::filter(subRegion %in% c("South Korea"))
unique(data_chart$scenario)
unique(dfClass1$class)
str(dfClass1)
library(ggplot2)
library(gghighlight)
unique(dfClass1$region)
## classLabel has only one attribute called 'sector'
unique(dfClass1$classLabel)
unique(dfClass1$class)
unique(dfClass1$param)
dfClass1 %>% filter(param)
emissCO2BySectorNoBio_filtered<- dfClass1 %>%
filter(param ==
#  "emissCO2BySector",
"emissCO2BySectorNoBio")
unique(data_chart$scenario)
emissCO2BySectorNoBio_filtered %>%
ggplot()+
geom_line(data=. %>% filter(scenario =="reference_with_dac_ssp_2_x3"), aes(x = x, y = value, group = class, color = "dac_ssp2"))+
geom_line(data=. %>% filter(scenario =="reference_with_dac_ssp_2"), aes(x = x, y = value, group = class, color = "dac_ssp2_x3"))+
geom_vline(xintercept = 2050, linetype ="dashed")+
facet_wrap(~class)+
theme(plot.title = element_text(size = 16))+
labs(title = "emission CO2 by sector no Bio with different dac_ssp_2 scenarios",
subtitle ="emission results from all sectors are almost identical in two senarios")
data_chart$param
charts <- rchart::chart(data_chart)
data_chart$param
charts <- rchart::chart(data_chart)
charts$chart_param
# rchart
data_chart <- dfClass1 %>%
dplyr::filter(subRegion %in% c("South Korea"))
library(tidyverse)
# rchart
data_chart <- dfClass1 %>%
dplyr::filter(subRegion %in% c("South Korea"))
library(tidyverse)
dfClass1 %>%
filter(param=="emissCO2BySectorNoBio") %>%
select(scenario, class, x, value) %>%
pivot_wider(names_from = scenario, values_from = value) %>%
mutate(diff = reference_with_dac_ssp_2 - reference_with_dac_ssp_2_x3)
data_chart$param
charts <- rchart::chart(data_chart)
# rmap
data_map <-  dfClass1 %>%
dplyr::filter(x %in% c(2100), param %in% c("pop"))
maps <- rmap::map(data_map)
??gcamextractor
-   discovery of `library(gcamaextractor)`
library(XML)
maps <- rmap::map(data_map)
setwd("C:/R/Rproject/jiseok_personal")
dac_ssp2<-read_xml("dac_ssp2.xml")
library(XML)
library(xml2)
setwd("C:/R/Rproject/jiseok_personal")
dac_ssp2<-read_xml("dac_ssp2.xml")
dac_ssp2_x3<-read_xml("dac_ssp2_x3.xml")
dac_ssp2
library(tidyverse)
dac_ssp2
dac_ssp2 %>%
as_list()
dac_ssp2 %>%
as_list() %>%
as_tibble()
dac_ssp2 %>%
as_list()
dac_ssp2 %>%
as_list() %>%
as_tibble() %>%
unnest(scenario) %>%
dac_ssp2 %>%
as_list() %>%
as_tibble() %>%
unnest(scenario)
dac_ssp2 %>%
as_list() %>%
as_tibble() %>%
unnest(scenario)
dac_ssp2 %>%
as_list() %>%
as_tibble() %>%
unnest(scenario) %>%
unnest(scenario)
dac_ssp2 %>%
as_list() %>%
as_tibble() %>%
unnest(scenario) %>%
unnest(scenario) %>%
unnest_longer(scenario)
dac_ssp2 %>%
as_list() %>%
as_tibble() %>%
unnest(scenario) %>%
unnest(scenario) %>%
unnest_longer(scenario) %>%
unnest(everything())
library(rgcam)
setwd("E:/gcam-v7.0-Windows-Release-Package/output")
setwd("E:/gcam-v7.0-Windows-Release-Package/output")
setwd("E:/gcam-v7.0-Windows-Release-Package/output")
conn <- localDBConn('/output', 'database_basexdb.0')
conn <- localDBConn('/', 'database_basexdb.0')
??localDBConn
conn <- localDBConn('/database_basexdb.0')
setwd("E:/gcam-v7.0-Windows-Release-Package/output")
conn <- localDBConn('/database_basexdb.0', )
conn <- localDBConn('E:\gcam-v7.0-Windows-Release-Package\output', 'my-gcamdb_basexdb')
conn <- localDBConn('E:\gcam-v7.0-Windows-Release-Package\output', 'my-gcamdb_basexdb')
conn <- localDBConn('E:\gcam-v7.0-Windows-Release-Package\output', 'my-gcamdb_basexdb')
conn <- localDBConn('E:\gcam-v7.0-Windows-Release-Package\output', 'my-gcamdb_basexdb')
setwd("E:/gcam-v7.0-Windows-Release-Package/output")
setwd("E:/gcam-v7.0-Windows-Release-Package")
conn <- localDBConn('/output', 'my-gcamdb_basexdb')
conn <- localDBConn('/output', 'my-gcamdb_basexdb.0')
conn <- localDBConn('/output', 'database_basexdb.0')
setwd("E:/gcam-v7.0-Windows-Release-Package")
conn <- localDBConn('/output', 'database_basexdb.0')
conn <- localDBConn('./output', 'database_basexdb.0')
prj <- addScenario(conn, 'my-project-name.dat', 'my-scenario-name',
'configuration.xml')
conn <- localDBConn('./output', 'database_basexdb.0')
prj <- addScenario(conn, 'my-project-name.dat', 'my-scenario-name',
'configuration.xml')
prj <- addScenario(conn, 'my-project-name.dat', 'my-scenario-name',
'.output/queries/Main_queries.xml')
prj <- addScenario(conn, 'my-project-name.dat', 'my-scenario-name',
'./output/queries/Main_queries.xml')
prj <- addScenario(conn, 'jiseok_project_rgcam_test.dat', 'my-scenario-name',
'./output/queries/Main_queries.xml')
conn <- localDBConn('./output', 'database_basexdb.0')
conn <- localDBConn('./output', 'database_basexdb.0')
conn
prj <- addScenario(conn, 'jiseok_project_rgcam_test.dat', 'my-scenario-name',
'./output/outputs/readGCAM/subSetQueries.xml')
??addScenario
prj <- addScenario(conn, 'jiseok_project_rgcam_test.dat', 'my-scenario-name')
conn
conn <- localDBConn('./output', 'database_basexdb.0')
prj <- addScenario(conn, 'jiseok_project_rgcam_test.dat', 'reference_with_dac_ssp_2')
proj
## List scenarios and queries
scenarios <- listScenarios(prj)
scenarios
## List scenarios and queries
scenarios <- listScenarios(prj)
scenarios
queries <- listQueries(jiseok_project_rgcam_test.dat, 'reference_with_dac_ssp_2')
queries <- listQueries('jiseok_project_rgcam_test.dat', 'reference_with_dac_ssp_2')
queries <- listQueries('jiseok_project_rgcam_test.dat', 'reference_with_dac_ssp_2')
queries <- listQueries(project.data, 'reference_with_dac_ssp_2')
conn <- localDBConn('./output', 'database_basexdb.0')
conn
prj <- addScenario(conn, 'jiseok_project_rgcam_test.dat', 'reference_with_dac_ssp_2')
prj
prj
str(prj)
str(prj)
## List scenarios and queries
scenarios <- listScenarios(prj)
scenarios
queries <- listQueries(project.data, 'reference_with_dac_ssp_2')
??listQueries
queries <- listQueries(project.data, 'reference_with_dac_ssp_2', anyscen =TRUE)
queries <- listQueries(jiseok_project_rgcam_test.dat, 'reference_with_dac_ssp_2', anyscen =TRUE)
queries <- listQueries('jiseok_project_rgcam_test.dat', 'reference_with_dac_ssp_2', anyscen =TRUE)
conn <- localDBConn('./output', 'database_basexdb.0')
str(prj)
queries <- listQueries(jiseok_project_rgcam_test.dat, 'reference_with_dac_ssp_2', anyscen =TRUE)
## Retrieve query named "GDP by region" for all scenarios in the dataset,
## formatted as a single table
gdp.rgn <- getQuery(prj, 'GDP by region')
setwd("C:/R/Rproject/jiseok_personal")
dac_ssp2<-read_xml("dac_ssp2.xml")
dac_ssp2_x3<-read_xml("dac_ssp2_x3.xml")
dac_ssp2
dac_ssp2_parse<-xmlParse("dac_ssp2.xml")
dac_ssp2_parse
dac_ssp2
library(httr)
??getURL
dac_sspe2_parse <-getURL("dac_ssp2.xml")
xmlToDataFrame(dac_ssp2_parse)
xmlToDataFrame(nodes = getNodeSet(dac_sspe2_parse, "//supplysector"))
library(tidyverse)
dac_ssp2 %>%
as_list() %>%
as_tibble() %>%
unnest(scenario) %>%
unnest(scenario) %>%
unnest_longer(scenario) %>%
unnest(everything())
## R에서 XML 태그 속성 parsing 하기
a<- xml_find_all(dac_ssp2, xpath=".//region") %>%
map(xml_attrs) %>%
map_df(~as.list(.)) %>%
mutate(TYPE = xml_find_all(dac_ssp2, './/region', ) %>%  xml_name)
is.data.frame(a) # data frame으로 변환 시켜주었으므로 TRUE 나올 것
a
unique(a$name)
dac_ssp2<-read_xml("dac_ssp2.xml")
node<-xml_children(read_xml("dac_ssp2.xml"))
View(node)
# The query must be the same XML found in a GCAM query file:
SAMPLE.GCAMDBLOC <- system.file("extdata",package="rgcam")
SAMPLE.GCAMDBLOC
db_connection <- localDBConn(SAMPLE.GCAMDBLOC, "sample_basexdb")
query_name <- "CO2 concentrations"
co2_query <- '<ClimateQuery title="CO2 concentrations">
<axis1 name="CO2-concentration">none</axis1>
<axis2 name="Year">CO2-concentration[@year]</axis2>
<xPath buildList="true" dataName="CO2-concentration" group="false" sumAll="false">climate-model/CO2-concentration/text()</xPath>
<comments/>
</ClimateQuery>'
addSingleQuery(db_connection, "test.proj", query_name, co2_query)
addSingleQuery(db_connection, "test.proj", query_name, co2_query)
# However it could also be given for instance as a query string that will result in such XML:
SAMPLE.QF <- system.file("ModelInterface", "sample-queries-interactive.xml", package="rgcam")
co2_query <- paste0("doc('", SAMPLE.QF, "')//*[@title='",
query_name, "']")
addSingleQuery(db_connection, "test.proj", query_name, co2_query)
addSingleQuery(db_connection, "test.proj", query_name, co2_query)
# Alternatively a user may use an XML package if for instance their query file is
# stored locally but are running queries on some remote machine:
library(xml2)
queries <- read_xml(SAMPLE.QF)
co2_query <- xml_find_first(queries, paste0("//*[@title='", query_name, "']"))
addSingleQuery(db_connection, "test.proj", query_name, co2_query)
