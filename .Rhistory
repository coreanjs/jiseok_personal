panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = paste("Parameter:", i, "\nOriginQuery:", origQuery),
fill ="구분",
x = "연도",
y = unit_param_selected)
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/img")
ggsave(plot =graph, file =paste0(i, ".png"),  width =1200, height = 700, units ="px", dpi = 150)
}
graph = GGS_621_data %>%
filter(param == i & x >= 2015) %>%
group_by(x, class1, scenario, origQuery) %>%
summarise(value = sum(value)) %>%
ggplot(aes(x = x, y = value, group = class1, fill = class1))+
geom_bar(stat='identity')+
# scale_fill_brewer(palette="Set1")+
scale_x_continuous(limits = c(2010, 2055), breaks = seq(2015, 2025, 2035, 2045))+
# scale_y_continuous(labels = comma, limits= c(0, 1200), breaks = seq(0, 1200, 200))+
geom_text(aes(label = round(after_stat(y), 0), group = x),
stat = 'summary', fun = sum, vjust = -1)+
facet_wrap(~scenario)+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 16),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = paste("Parameter:", i, "\nOriginQuery:", origQuery),
fill ="구분",
x = "연도",
y = unit_param_selected)
graph = GGS_621_data %>%
filter(param == i & x >= 2015) %>%
group_by(x, class1, scenario, origQuery) %>%
summarise(value = sum(value)) %>%
ggplot(aes(x = x, y = value, group = class1, fill = class1))+
geom_bar(stat='identity')+
# scale_fill_brewer(palette="Set1")+
scale_x_continuous(limits = c(2010, 2055), breaks = c(2015, 2025, 2035, 2045))+
# scale_y_continuous(labels = comma, limits= c(0, 1200), breaks = seq(0, 1200, 200))+
geom_text(aes(label = round(after_stat(y), 0), group = x),
stat = 'summary', fun = sum, vjust = -1)+
facet_wrap(~scenario)+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 16),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = paste("Parameter:", i, "\nOriginQuery:", origQuery),
fill ="구분",
x = "연도",
y = unit_param_selected)
for (i in param_all) {
GGS_621_data %>%
filter(param == i) %>%
distinct(units)->unit_param_selected
unit_param_selected
GGS_621_data %>%
filter(param == i) %>%
distinct(origQuery) ->origQuery
graph = GGS_621_data %>%
filter(param == i & x >= 2015) %>%
group_by(x, class1, scenario, origQuery) %>%
summarise(value = sum(value)) %>%
ggplot(aes(x = x, y = value, group = class1, fill = class1))+
geom_bar(stat='identity')+
# scale_fill_brewer(palette="Set1")+
scale_x_continuous(limits = c(2010, 2055), breaks = c(2015, 2025, 2035, 2045))+
# scale_y_continuous(labels = comma, limits= c(0, 1200), breaks = seq(0, 1200, 200))+
geom_text(aes(label = round(after_stat(y), 0), group = x),
stat = 'summary', fun = sum, vjust = -1)+
facet_wrap(~scenario)+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 16),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = paste("Parameter:", i, "\nOriginQuery:", origQuery),
fill ="구분",
x = "연도",
y = unit_param_selected)
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/img")
ggsave(plot =graph, file =paste0(i, ".png"),  width =1200, height = 700, units ="px", dpi = 150)
}
### Import NZ2050
GGS621_cap_tax <- gcamextractor::readgcam(gcamdatabase = "E:/gcam-v7.0-Windows-Release-Package_GGS621/output/database_basexdb",
paramsSelect = c(#"energy" ## energy 오류 남
"electricity",
"transport",
"building",
"emissions",
"hydrogen"
), ### this is a key
regionsSelect = c("South Korea"),
folder = "gcamextractor/GGS621_cap_tax")
### Import NZ2050
GGS621_cap_tax <- gcamextractor::readgcam(gcamdatabase = "E:/gcam-v7.0-Windows-Release-Package_GGS621/output/database_basexdb",
paramsSelect = c(#"energy" ## energy 오류 남
"electricity",
"transport",
"building",
"emissions",
"hydrogen"
), ### this is a key
regionsSelect = c("South Korea"),
folder = "gcamextractor/GGS621_cap_tax")
setwd("C:/R/Rproject/jiseok_personal/GGS621")
### Import NZ2050
GGS621_cap_tax <- gcamextractor::readgcam(gcamdatabase = "E:/gcam-v7.0-Windows-Release-Package_GGS621/output/database_basexdb",
paramsSelect = c(#"energy" ## energy 오류 남
"electricity",
"transport",
"building",
"emissions",
"hydrogen"
), ### this is a key
regionsSelect = c("South Korea"),
folder = "gcamextractor/GGS621_cap_tax")
GGS621_cap_tax
GGS_621_data<- GGS621_cap_tax$dataAll %>%
mutate(param = ifelse(is.na(param), 'CO2 sequestration by sector', param))
is.na(unique(GGS_621_data$param))
for (i in param_all) {
GGS_621_data %>%
filter(param == i) %>%
distinct(units)->unit_param_selected
unit_param_selected
GGS_621_data %>%
filter(param == i) %>%
distinct(origQuery) ->origQuery
graph = GGS_621_data %>%
filter(param == i & x >= 2015) %>%
group_by(x, class1, scenario, origQuery) %>%
summarise(value = sum(value)) %>%
ggplot(aes(x = x, y = value, group = class1, fill = class1))+
geom_bar(stat='identity')+
# scale_fill_brewer(palette="Set1")+
scale_x_continuous(limits = c(2010, 2055), breaks = c(2015, 2025, 2035, 2045))+
# scale_y_continuous(labels = comma, limits= c(0, 1200), breaks = seq(0, 1200, 200))+
geom_text(aes(label = round(after_stat(y), 0), group = x),
stat = 'summary', fun = sum, vjust = -1)+
facet_wrap(~scenario)+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 16),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = paste("Parameter:", i, "\nOriginQuery:", origQuery),
fill ="구분",
x = "연도",
y = unit_param_selected)
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/img")
ggsave(plot =graph, file =paste0(i, ".png"),  width =1200, height = 700, units ="px", dpi = 150)
}
l
unique(GGS_621_data$param) ->param_all
for (i in param_all) {
GGS_621_data %>%
filter(param == i) %>%
distinct(units)->unit_param_selected
unit_param_selected
GGS_621_data %>%
filter(param == i) %>%
distinct(origQuery) ->origQuery
graph = GGS_621_data %>%
filter(param == i & x >= 2015) %>%
group_by(x, class1, scenario, origQuery) %>%
summarise(value = sum(value)) %>%
ggplot(aes(x = x, y = value, group = class1, fill = class1))+
geom_bar(stat='identity')+
# scale_fill_brewer(palette="Set1")+
scale_x_continuous(limits = c(2010, 2055), breaks = c(2015, 2025, 2035, 2045))+
# scale_y_continuous(labels = comma, limits= c(0, 1200), breaks = seq(0, 1200, 200))+
geom_text(aes(label = round(after_stat(y), 0), group = x),
stat = 'summary', fun = sum, vjust = -1)+
facet_wrap(~scenario)+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 16),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = paste("Parameter:", i, "\nOriginQuery:", origQuery),
fill ="구분",
x = "연도",
y = unit_param_selected)
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/img")
ggsave(plot =graph, file =paste0(i, ".png"),  width =1200, height = 700, units ="px", dpi = 150)
}
library(readxl)
getwd()
getwd()
data_ssp2_sector
library(tidyverse)
data_ssp2_sector_longer<-data_ssp2_sector %>%
pivot_longer(-c('scenario', 'region','Units', 'sector'), names_to= "year", values_to="MTC") %>%
mutate(year = as.numeric(year))
str(data_ssp2_sector_longer)
library(scales)
options(scipen = 999)
data_ssp2_sector_longer%>%
ggplot(aes(x = year, y = MTC, group = scenario, color = scenario))+
geom_line()+
scale_y_continuous(labels = comma)+
scale_x_continuous(breaks = c( 2020, 2050, 2100))+
facet_wrap(~sector, scale="free_y", ncol = 4)+
theme(legend.position ="bottom")+
labs(title ="CO2 emission by tech (dac_ssp2 vs dap_ssp2_x3)")
devtools::install_github('Timag/imageclipr')
library(imageclipr)
reticulate::repl_python()
%matplotlib inline
reticulate::repl_python()
import seaborn as sns ### 그래프 그리는 라이브러리
import pandas as pd ### 데이터 분석을 하기 위한 파이썬 라이브러리 such as a table
import pandas as pd ### 데이터 분석을 하기 위한 파이썬 라이브러리 such as a table
import numpy as np ### 수치해석 라이브러리
import matplotlib.pyplot as plt ### 그래프 그리는 라이브러리
import seaborn as sns ### 그래프 그리는 라이브러리
import pandas as pd ### 데이터 분석을 하기 위한 파이썬 라이브러리 such as a table
import numpy as np ### 수치해석 라이브러리
import matplotlib.pyplot as plt ### 그래프 그리는 라이브러리
import seaborn as sns ### 그래프 그리는 라이브러리
import pandas as pd ### 데이터 분석을 하기 위한 파이썬 라이브러리 such as a table
import pandas as pd ### 데이터 분석을 하기 위한 파이썬 라이브러리 such as a table
import numpy as np ### 수치해석 라이브러리
import matplotlib.pyplot as plt ### 그래프 그리는 라이브러리
import seaborn as sns ### 그래프 그리는 라이브러리
import pandas as pd ### 데이터 분석을 하기 위한 파이썬 라이브러리 such as a table
import numpy as np ### 수치해석 라이브러리
import pandas as pd ### 데이터 분석을 하기 위한 파이썬 라이브러리 such as a table
import pandas as pd ### 데이터 분석을 하기 위한 파이썬 라이브러리 such as a table
import numpy as np ### 수치해석 라이브러리
import matplotlib.pyplot as plt ### 그래프 그리는 라이브러리
import seaborn as sns ### 그래프 그리는 라이브러리
import numpy as np
import numpy as np
import numpy as np
import matplotlib.pyplot as plt
python3 -m pip install matplotlib
import matplotlib.pyplot as plt ### 그래프 그리는 라이브러리
import matplotlib.pyplot as plt ### 그래프 그리는 라이브러리
import pandas as pd ### 데이터 분석을 하기 위한 파이썬 라이브러리 such as a table
import pandas as pd ### 데이터 분석을 하기 위한 파이썬 라이브러리 such as a table
import numpy as np ### 수치해석 라이브러리
import matplotlib.pyplot as plt ### 그래프 그리는 라이브러리
import seaborn as sns ### 그래프 그리는 라이브러리
import seaborn as sns ### 그래프 그리는 라이브러리
import seaborn as sns ### 그래프 그리는 라이브러리
reticulate::conda_install(envname = "r-reticulate", "jupyter")
import pandas as pd ### 데이터 분석을 하기 위한 파이썬 라이브러리 such as a table
import pandas as pd ### 데이터 분석을 하기 위한 파이썬 라이브러리 such as a table
import pandas as pd
import pandas as pd ### 데이터 분석을 하기 위한 파이썬 라이브러리 such as a table
import numpy as np ### 수치해석 라이브러리
import matplotlib.pyplot as plt ### 그래프 그리는 라이브러리
import matplotlib.pyplot as plt ### 그래프 그리는 라이브러리
import pandas as pd
import pandas as pd
import numpy as np ### 수치해석 라이브러리
import seaborn as sns ### 그래프 그리는 라이브러리
import matplotlib.pyplot as plt ### 그래프 그리는 라이브러리
import seaborn as sns ### 그래프 그리는 라이브러리
import seaborn as sns ### 그래프 그리는 라이브러리
r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
subplot_kw = {'projection': 'polar'}
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
df=pd.read_csv("./BostonHouse/BostonHousing2.csv")
df=pd.read_csv("./ITM812/BostonHousing2.csv")
df.tail(10)
quit
library(tidyverse)
library(readxl)
getwd()
demand<-read.csv("./ITM812/demand.csv")
demand<-read.csv("./ITM812/demand.csv")
demand
trade<-read.csv("./ITM812/tradee.csv")
trade<-read.csv("./ITM812/trade.csv")
demand
demand %>%
pivot_longer(-날짜, names_to="hour", value_to ="MWh")
demand %>%
pivot_longer(-날짜, names_to="hour", values_to ="MWh")
demand %>%
pivot_longer(-날짜, names_to="hour", values_to ="MWh") %>%
mutate(hour= str_sub(hour, 1))
demand %>%
pivot_longer(-날짜, names_to="hour", values_to ="MWh") %>%
mutate(hour= str_sub(hour, 1, 2))
demand %>%
pivot_longer(-날짜, names_to="hour", values_to ="MWh") %>%
mutate(hour= str_sub(hour, 1, 1))
demand %>%
pivot_longer(-날짜, names_to="hour", values_to ="MWh") %>%
mutate(hour= gsub('X', '', hour))
demand %>%
pivot_longer(-날짜, names_to="hour", values_to ="MWh") %>%
mutate(hour= gsub('X'| '시', '', hour))
demand %>%
pivot_longer(-날짜, names_to="hour", values_to ="MWh") %>%
mutate(hour= gsub('X', '', hour),
hour= gsub('시', '', hour))
trade<-read.csv("./ITM812/trade.csv")
trade
demand %>%
pivot_longer(-날짜, names_to="hour", values_to ="MWh") %>%
mutate(hour= gsub('X', '', hour),
hour= gsub('시', '', hour))
trade<-read.csv("./ITM812/trade.csv")
trade
demand %>%
rename(date = 날짜)
trade<-read.csv("./ITM812/trade.csv") %>%
head(trade)
trade<-read.csv("./ITM812/trade.csv") %>%
head(trade)
trade<-read.csv("./ITM812/trade.csv")
head(trade)
trade<-read.csv("./ITM812/trade.csv") %>%
rename(date = 거래일, fuel = 연료원, hour = 거래시간, trade = 전력거래량)
head(trade)
## 날짜 hour MWh
demand_tidy<- demand %>%
rename(date = 날짜) %>%
pivot_longer(-date, names_to="hour", values_to ="MWh") %>%
mutate(hour= gsub('X', '', hour),
hour= gsub('시', '', hour))
trade<-read.csv("./ITM812/trade.csv") %>%
rename(date = 거래일, fuel = 연료원, hour = 거래시간, trade = 전력거래량)
head(trade)
trade<-read.csv("./ITM812/trade.csv") %>%
rename(date = 거래일, fuel = 연료원, hour = 거래시간, trade = 전력거래량) %>%
select(date, hour, fuel, trade
)
trade<-read.csv("./ITM812/trade.csv") %>%
rename(date = 거래일, fuel = 연료원, hour = 거래시간, trade = 전력거래량) %>%
select(date, hour, fuel, trade)
head(trade)
demand_tidy
demand<-read.csv("./ITM812/demand.csv") %>%
rename(date = 날짜) %>%
pivot_longer(-date, names_to="hour", values_to ="MWh") %>%
mutate(hour= gsub('X', '', hour),
hour= gsub('시', '', hour))
demand
trade
demand_trade<- full_join(demand, trade, by = c(date, hour))
str(demand)
str(trade)
trade<-read.csv("./ITM812/trade.csv") %>%
rename(date = 거래일, fuel = 연료원, hour = 거래시간, trade = 전력거래량) %>%
select(date, hour, fuel, trade) %>%
as.tibble()
str(trade)
demand_trade<- full_join(demand, trade, by = c(date, hour))
demand_trade<- inner_join(demand, trade, by = c(date, hour))
demand_trade<- inner_join(demand, trade, by = c('date', 'hour'))
demand<-read.csv("./ITM812/demand.csv") %>%
rename(date = 날짜) %>%
pivot_longer(-date, names_to="hour", values_to ="MWh") %>%
mutate(hour= gsub('X', '', hour),
hour= gsub('시', '', hour),
hour = as.numeric(hour))
str(demand)
trade<-read.csv("./ITM812/trade.csv") %>%
rename(date = 거래일, fuel = 연료원, hour = 거래시간, trade = 전력거래량) %>%
select(date, hour, fuel, trade) %>%
as.tibble()
str(trade)
trade
trade<-read.csv("./ITM812/trade.csv") %>%
rename(date = 거래일, fuel = 연료원, hour = 거래시간, trade = 전력거래량) %>%
select(date, hour, fuel, trade) %>%
as.tibble() %>%
pivot_wider(names_from="fuel", values_from="MWh")
trade
trade<-read.csv("./ITM812/trade.csv") %>%
rename(date = 거래일, fuel = 연료원, hour = 거래시간, trade = 전력거래량) %>%
select(date, hour, fuel, trade) %>%
as.tibble() %>%
pivot_wider(names_from="fuel", values_from="trade")
trade
str(trade)
demand_trade<- inner_join(demand, trade, by = c('date', 'hour'))
demand_trade
demand_trade %>%
write.csv('demand_trade.csv')
demand_trade %>%
write.csv('demand_trade.csv', encoding ='UTF-8')
demand_trade %>%
write.csv('demand_trade.csv', fileEncoding ='UTF-8')
demand_trade %>%
write.csv('demand_trade.csv', fileEncoding ='cp959')
demand_trade %>%
write.csv('demand_trade.csv', fileEncoding ='cp49')
demand_trade %>%
write.csv('demand_trade.csv', fileEncoding ='cp49')
demand_trade<- inner_join(demand, trade, by = c('date', 'hour'))
demand_trade %>%
write.csv('demand_trade.csv', fileEncoding ='cp49')
demand_trade %>%
write.csv('demand_trade.csv', fileEncoding ='cp949')
demand_trade
demand_trade %>%
write.csv('demand_trade.csv', fileEncoding ='cp949', row.names=FALSE)
demand<-read.csv("./ITM812/demand.csv") %>%
rename(date = 날짜, 전력수요 = MWh) %>%
pivot_longer(-date, names_to="hour", values_to ="전력수요") %>%
mutate(hour= gsub('X', '', hour),
hour= gsub('시', '', hour),
hour = as.numeric(hour))
demand<-read.csv("./ITM812/demand.csv") %>%
rename(date = 날짜, 전력수요 = MWh) %>%
pivot_longer(-date, names_to="hour", values_to ="전력수요") %>%
mutate(hour= gsub('X', '', hour),
hour= gsub('시', '', hour),
hour = as.numeric(hour))
demand<-read.csv("./ITM812/demand.csv") %>%
rename(date = 날짜) %>%
pivot_longer(-date, names_to="hour", values_to ="MWh") %>%
mutate(hour= gsub('X', '', hour),
hour= gsub('시', '', hour),
hour = as.numeric(hour))
str(demand)
demand<-read.csv("./ITM812/demand.csv") %>%
rename(date = 날짜) %>%
pivot_longer(-date, names_to="hour", values_to ="MWh") %>%
mutate(hour= gsub('X', '', hour),
hour= gsub('시', '', hour),
hour = as.numeric(hour)) %>%
rename(전력수요 = MWh)
str(demand)
trade<-read.csv("./ITM812/trade.csv") %>%
rename(date = 거래일, fuel = 연료원, hour = 거래시간, trade = 전력거래량) %>%
select(date, hour, fuel, trade) %>%
as.tibble() %>%
pivot_wider(names_from="fuel", values_from="trade")
trade<-read.csv("./ITM812/trade.csv") %>%
rename(date = 거래일, fuel = 연료원, hour = 거래시간, trade = 전력거래량) %>%
select(date, hour, fuel, trade) %>%
as.tibble() %>%
pivot_wider(names_from="fuel", values_from="trade")
trade<-read.csv("./ITM812/trade.csv") %>%
rename(date = 거래일, fuel = 연료원, hour = 거래시간, trade = 전력거래량) %>%
select(date, hour, fuel, trade) %>%
as.tibble() %>%
pivot_wider(names_from="fuel", values_from="trade")
trade
trade %>%
mutate(year = year(date))
trade %>%
mutate(year = year(date)) %>%
relocate(date)
trade %>%
mutate(year = year(date)) %>%
relocate(year)
trade %>%
mutate(year = year(date)) %>%
relocate(year) %>%
unique(year)
trade %>%
mutate(year = year(date)) %>%
relocate(year) %>%
distinct(year)
str(trade)
demand_trade<- inner_join(demand, trade, by = c('date', 'hour'))
demand_trade
## 인코딩 cp949
demand_trade %>%
write.csv('demand_trade.csv', fileEncoding ='cp949', row.names=FALSE)
## 인코딩 cp949
demand_trade %>%
select(-date, -hour) %>%
write.csv('demand_trade.csv', fileEncoding ='cp949', row.names=FALSE)
demand_trade
row.names(demand_trade)
colum.names(demand_trade)
column.names(demand_trade)
colnames(demand_trade)
