date_labels = "%y")+
scale_y_continuous(labels = comma, limits = c (0, 400000))+
labs(title = '1차에너지 공급')+
TPP_PrimarySupply %>%
filter(type != "합계") %>%
mutate(year = as.Date(year, format ="%Y")) %>%
ggplot(aes(x = year, y = ktoe,  group = type, fill= type))+
geom_area()+
scale_x_date(date_breaks = "5 years",
date_labels = "%y")+
scale_y_continuous(labels = comma, limits = c (0, 200000))+
theme(legend.position = "none")+
facet_wrap(~type, nrow = 2)
test<-TPP_PrimarySupply %>%
filter(type != "합계") %>%
mutate(year = as.Date(year, format ="%Y")) %>%
ggplot(aes(x = year, y = ktoe,  group = type, fill= type))+
geom_area()+
scale_x_date(date_breaks = "5 years",
date_labels = "%y")+
scale_y_continuous(labels = comma, limits = c (0, 400000))+
labs(title = '1차에너지 공급')+
TPP_PrimarySupply %>%
filter(type != "합계") %>%
mutate(year = as.Date(year, format ="%Y")) %>%
ggplot(aes(x = year, y = ktoe,  group = type, fill= type))+
geom_area()+
scale_x_date(date_breaks = "5 years",
date_labels = "%y")+
scale_y_continuous(labels = comma, limits = c (0, 200000))+
theme(legend.position = "none")+
facet_wrap(~type, nrow = 2)
plotly(test)
ggplotly(test)
library(sf)
library(spikemap)
library(cartography)
install.packages("cartography")
install.packages("spikemap")
library(spikemap)
library(cartography)
require(remotes)
install_github("rCarto/spikemap")
library(sf)
library(spikemap)
library(cartography)
# import the dataset from the package
com <- st_read(system.file("gpkg/com.gpkg", package="spikemap"))
# import the dataset from the package
com <- st_read(system.file("gpkg/com.gpkg", package="spikemap"))
# save figure as spiky.png in img folder
png(filename = "img/spiky.png", width = 1000, height = 722, res = 100)
# set the margin of the figure
par(mar = c(0.2,0.2,0.2,0.2))
# plot the base map
plot(st_geometry(com), col="#99aed1", border = "#e1e5eb",
lwd = 0.2, bg = "#e1e5eb")
# display spikes for municipalities under 1000 inhabitants.
# use fixmax arg to allow multiple spike plots with the same scale.
spikemap(x = com[com$pop<=1000, ], var = "pop",
inches = 2.5, fixmax = 500000,
col = "#ffffff90", border = "#94000090",  lwd = .5,
legend.pos = "x")
# plot the base map
plot(st_geometry(com), col="#99aed1", border = "#e1e5eb",
lwd = 0.2, bg = "#e1e5eb")
# display spikes for municipalities under 1000 inhabitants.
# use fixmax arg to allow multiple spike plots with the same scale.
spikemap(x = com[com$pop<=1000, ], var = "pop",
inches = 2.5, fixmax = 500000,
col = "#ffffff90", border = "#94000090",  lwd = .5,
legend.pos = "x")
# display spikes for other municipalities
# use locator() to pick a place for the legend or use "bottomleft".
spikemap(x = com[com$pop>1000, ], var = "pop",
inches = 2.5, fixmax = 500000,
col = "#ffffff", border = "#940000", lwd = 1.1,
legend.pos = c(779307.2, 6128000),
legend.title.txt = "Population",
legend.values.rnd = -3)
# import the dataset from the package
com <- st_read(system.file("gpkg/com.gpkg", package="spikemap"))
# save figure as spiky.png in img folder
png(filename = "img/spiky.png", width = 1000, height = 722, res = 100)
# set the margin of the figure
par(mar = c(0.2,0.2,0.2,0.2))
# plot the base map
plot(st_geometry(com), col="#99aed1", border = "#e1e5eb",
lwd = 0.2, bg = "#e1e5eb")
# display spikes for other municipalities
# use locator() to pick a place for the legend or use "bottomleft".
spikemap(x = com[com$pop>1000, ], var = "pop",
inches = 2.5, fixmax = 500000,
col = "#ffffff", border = "#940000", lwd = 1.1,
legend.pos = c(779307.2, 6128000),
legend.title.txt = "Population",
legend.values.rnd = -3)
# get the tips of the spikes
lbl <- spikelabel(x = com, var = "pop",
inches = 2.5, fixmax = 500000)
lbl <- lbl[order(lbl$pop, decreasing = T),]
# display only the 12 first, use various cex and halo
labelLayer(lbl[1:12,], txt = "name",
pos = 3, offset = .5,
halo = T, bg = "#99aed150",
cex = c(1.3, 1.1, 1, rep(.8,12)),
col = "grey30")
# add scale bar, north arrow, title, sources...
barscale(size = 20, pos= c(629638.7 ,6136862.3 ), lwd = 1)
north(pos = "topright", col = "grey60", x = com)
layoutLayer(title = "",
sources = "ADMIN EXPRESS COG édition 2019, IGN",
author = "T. Giraud, 2020 | spikemap 0.1.0",
frame = FALSE, scale = FALSE)
mtext("Population \nin Occitanie",
side = 3, adj = 0.01, padj = 0, line = -5,
cex = 2.5, font = 3, col = "grey30")
dev.off()
# import the dataset from the package
com <- st_read(system.file("gpkg/com.gpkg", package="spikemap"))
# save figure as spiky.png in img folder
png(filename = "img/spiky.png", width = 1000, height = 722, res = 100)
# set the margin of the figure
par(mar = c(0.2,0.2,0.2,0.2))
# plot the base map
plot(st_geometry(com), col="#99aed1", border = "#e1e5eb",
lwd = 0.2, bg = "#e1e5eb")
power_sales_2022<- data.frame(
year = c(2013L,2014L,2015L,2016L,2017L,2018L,
2019L,2020L,2021L,2022L),
주택용 = c(65814572,64457263,65618610,68056786,
68543760,72894709,72638868,76303405,79914811,80996133),
일반용 = c(102196338,100760879,103679346,108616888,
111297776,116933912,116226510,113638542,119550386,
127192892),
교육용 = c(7947317,7438374,7690600,8079392,8316290,
8677808,8560660,7515352,8422605,9073974),
산업용 = c(265372531,272551573,273547997,278827855,
285969563,292998663,289240198,278660247,291333422,
296035507),
농사용 = c(13865837,14504731,15702468,16579843,
17250850,18503827,18882368,19028829,20603212,21420089),
가로등 = c(3156226,3221008,3341240,3462314,3556775,
3582649,3571475,3506999,3444429,3424194),
심야 = c(16495759,14657873,14074556,13415826,
12811372,12557594,11378658,10616342,10161945,9789953)
)
power_sales_2022
power_sales_2022
str(power_sales_2022)
power_sales_2022 %>%
pivot_longer(-year, names_to ="type", values_to ="MWh")
library(ggplot)
library(ggplot2)
power_sales_2022 %>%
pivot_longer(-year, names_to ="type", values_to ="MWh")
library(ggplot2)
power_sales_2022 %>%
pivot_longer(-year, names_to ="type", values_to ="MWh")
library(tidyverse)
library(RColorBrewer)
library(scales)
library(lubridate)
library(ggh4x)
library(plotly)
library(zoo)
library(extrafont)
library(showtext)
library(gghighlight)
library(echarts4r)
library(ggh4x)
library(gganimate)
library(babynames)
library(hrbrthemes)
library(viridis)
library(calendR)
library(sugrrants)
library(ggrepel)
library(ggExtra)
library(gghighlight)
library(ggiraph)
library(treemapify)
library(ggthemr)
library(patchwork)
library(readxl)
library(knitr)
library(readxl)
library(ggtext)
options(digits=2)
options (scipen = 999)
power_sales_2022<- data.frame(
year = c(2013L,2014L,2015L,2016L,2017L,2018L,
2019L,2020L,2021L,2022L),
주택용 = c(65814572,64457263,65618610,68056786,
68543760,72894709,72638868,76303405,79914811,80996133),
일반용 = c(102196338,100760879,103679346,108616888,
111297776,116933912,116226510,113638542,119550386,
127192892),
교육용 = c(7947317,7438374,7690600,8079392,8316290,
8677808,8560660,7515352,8422605,9073974),
산업용 = c(265372531,272551573,273547997,278827855,
285969563,292998663,289240198,278660247,291333422,
296035507),
농사용 = c(13865837,14504731,15702468,16579843,
17250850,18503827,18882368,19028829,20603212,21420089),
가로등 = c(3156226,3221008,3341240,3462314,3556775,
3582649,3571475,3506999,3444429,3424194),
심야 = c(16495759,14657873,14074556,13415826,
12811372,12557594,11378658,10616342,10161945,9789953)
)
library(ggplot2)
power_sales_2022 %>%
pivot_longer(-year, names_to ="type", values_to ="MWh")
power_sales_2022 %>%
pivot_longer(-year, names_to ="type", values_to ="MWh") %>%
mutate(TWh= MWh/1000000)
power_sales_2022 %>%
pivot_longer(-year, names_to ="type", values_to ="MWh") %>%
mutate(TWh= MWh/1000000) %>%
group_by(year) %>%
mutate(year_sum = sum(TWh))
power_sales_2022 %>%
pivot_longer(-year, names_to ="type", values_to ="MWh") %>%
mutate(TWh= MWh/1000000) %>%
group_by(year) %>%
mutate(year_sum = sum(TWh),
pct = TWh/year_sum*100)
power_sales_2022_tidy<- power_sales_2022 %>%
pivot_longer(-year, names_to ="type", values_to ="MWh") %>%
mutate(TWh= MWh/1000000) %>%
group_by(year) %>%
mutate(year_sum = sum(TWh),
pct = TWh/year_sum*100)
power_sales_2022_tidy
power_sales_2022_tidy %>%
ggplot(aes(x =year, y = TWh))
power_sales_2022_tidy %>%
ggplot(aes(x =year, y = TWh, color = pct))+
geom_line()
power_sales_2022_tidy %>%
ggplot(aes(x =year, y = TWh, color = type, group = type))+
geom_line()
power_sales_2022<- data.frame(
year = c(2013L,2014L,2015L,2016L,2017L,2018L,
2019L,2020L,2021L,2022L),
서울 = c(46555105,45018863,45381484,46493234,
46298158,47810210,47167206,45787926,47295807,48788677),
부산 = c(20364705,19980898,20002307,20467093,
21007358,21216605,20802410,20503969,21067833,21493648),
대구 = c(15080052,14858787,14947708,15268114,
15386372,15675749,15265585,14758568,15443949,16039260),
인천 = c(22673441,22578048,23211766,23875857,
24515313,24921926,24280690,23638583,24901194,25506864),
광주 = c(8274074,8197277,8333873,8558369,8683649,
8773811,8603297,8531108,8973447,9116871),
대전 = c(9225140,9102524,9182737,9379633,9423804,
9648827,9415699,9405221,9748621,10016877),
울산 = c(29992969,30115123,30286140,32095217,
31609850,33748169,34138999,33157834,33593123,32919181),
세종 = c(2345527,2437031,2641139,2801869,2918758,
3087693,3226179,3393223,4295363,3182079),
경기 = c(102227067,102180707,105048003,109403901,
114847859,122695954,123022307,124688964,133445948,
140531012),
강원 = c(15794741,15778144,16206618,16498768,
16552836,16845836,16368275,16120067,16808006,17325520),
충북 = c(21665043,22179262,22949032,24008863,
24843477,26239895,26732303,26901894,28402063,29412227),
충남 = c(45466812,47294961,47286062,48453931,
50180209,52012705,52644854,50422732,48801626,50259638),
전북 = c(21708655,22297413,22086860,22733495,
22799647,22961959,22280693,20538912,21486861,21838474),
전남 = c(30302068,31722943,32637829,33096902,
33562076,34118388,32385388,30973975,33486886,34665105),
경북 = c(45444247,46016364,44956836,44647503,
45455611,45958814,44314767,41001627,44258297,44601033),
경남 = c(33530619,33435157,33876325,34497477,
34647864,35158610,34472017,34069974,35734059,36190920),
제주 = c(4094900,4220090,4429553,4738201,5013545,
5272604,5374285,5373288,5687730,6045356)
)
power_sales_2022_tidy<- power_sales_2022 %>%
pivot_longer(-year, names_to ="type", values_to ="MWh") %>%
mutate(TWh= MWh/1000000) %>%
group_by(year) %>%
mutate(year_sum = sum(TWh),
pct = TWh/year_sum*100)
power_sales_2022_tidy
power_sales_2022_tidy %>%
ggplot(aes(x =year, y = TWh, color = type, group = type))+
geom_line()
power_sales_2022_tidy
power_sales_2022_tidy %>%
ggplot(aes(x =year, y = pct, color = type, group = type))+
geom_line()
library(tidyverse)
library(httr)
library(rvest)
library(jsonlite)
library(XML)
library(RCurl)
library(lubridate)
library(scales)
library(showtext)
library(ggridges)
library(gghighlight)
library(readxl)
library(patchwork)
library(ggdist)
library(extrafont)
# 라이브러리 불러오기
library(httr)
# URL 문자열
url<-"https://apihub.kma.go.kr/api/typ01/url/kma_sfcdd3.php?tm1=20230101&tm2=20230806&stn=108&help=0&disp=0&mode=0&authKey=futrPDYYS16razw2GNteHA"
# GET 요청
response <- GET(url)
content(response)
# URL 문자열
url<-"https://apihub.kma.go.kr/api/typ01/url/kma_sfcdd3.php?tm1=20230101&tm2=20230806&stn=108&help=0&mode=0&authKey=futrPDYYS16razw2GNteHA"
# GET 요청
response <- GET(url)
content(response)
content(response)
# 응답을 XML로 파싱합니다.
xml <- xmlParse(content(response, "text"))
file_path <- 'output_file.zip'; # 저장할 파일 경로 설정
download.file(url, file_path, mode = 'wb'); # URL에서 파일 다운로드
# 라이브러리 불러오기
library(httr)
# URL 문자열
url<-"https://apihub.kma.go.kr/api/typ01/url/kma_sfcdd3.php?tm1=20230101&tm2=20230806&stn=108&help=0&mode=0&authKey=futrPDYYS16razw2GNteHA"
# GET 요청
response <- GET(url)
content(response)
reqURL_KMA = 'http://apis.data.go.kr/1360000/AsosDalyInfoService/getWthrDataList'
myKey = "d3yc9GgK8UhvfztUX1CjO%2Bx00fZ1NsWHbpJIzLyGisyXa%2Fto2RgFdnh7yQ%2F1TfhjRo5Y%2FvUOrs40lf89dItc6Q%3D%3D"
####### JSON으로 받기 나성호 방법. 나성호의 R 부동산 데이터 분석 특강
KMA<-GET(url =  reqURL_KMA,
query = list(ServiceKey = myKey %>% I(),
numOfRows = 999,  ##"데이터요청은 한번에 최대 1,000건을 넘을 수 없습니다."
#pageNo = 999,
dataType = 'JSON',
dataCd = 'ASOS',
dateCd = 'DAY',
startDt = '19730101', ### 여기 설정 중요
endDt = '20230806',   ### 여기 설정 중요
stnIds = '108'
))
KMA
KMA
content(KMA)
KMA %>%
content(as = 'text', encoding = 'UTF-8') %>%
fromJSON(flatten =TRUE) -> json
json
## OpenAPI 호출 결과 데이터 갯수
num_of_rows<- json$response$body$numOfRows
num_of_rows
## 전체 데이터 갯
total_count<-json$response$body$totalCount
total_count
loop_count <- ceiling(total_count/num_of_rows)
loop_count
library(gcamextractor)
library(rchart)
library(rmap)
library(dplyr)
library(ggplot2)
library(gghighlight)
library(scales)
library(ggthemes)
options(scipen =999)
setwd("C:/R/Rproject/jiseok_personal/GGS621")
decarb_two_regions <- gcamextractor::readgcam(gcamdatabase = "E:/gcam-v7.0-Windows-Release-Package_GGS621/output/database_basexdb",
paramsSelect = c(
"emissions"
), ### this is a key
regionsSelect = c("South Korea", "Japan"),
folder = "gcamextractor/GGS621_cap_tax_two_regions")
unique(decarb_two_regions$dataAggClass1$region)
unique(decarb_two_regions$dataAll$param)
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_grid(scenario~class1)+
labs(title ="CO2 emissions - (MTCO2)")
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_grid(scenario~class1)+
labs(title ="CO2 emissions - (MTCO2)")
unique(decarb_two_regions$dataAll$param)
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
distinct(units)
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_grid(scenario~class1)+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 20, face ="bold"),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = unit_param_selected,
subtitle = paste("Parameter:", "emissCO2BySectorNoBio"),
x = "year",
y = " CO2 emissions - (MTCO2)")
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_grid(scenario~class1)+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 20, face ="bold"),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = "unit_param_selected",
subtitle = paste("Parameter:", "emissCO2BySectorNoBio"),
x = "year",
y = " CO2 emissions - (MTCO2)")
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_grid(scenario~class1)+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 20, face ="bold"),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = "CO2 emissions - (MTCO2)",
subtitle = paste("Parameter:", "emissCO2BySectorNoBio"),
x = "year",
y = " CO2 emissions - (MTCO2)")
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_grid(scenario~class1)+
theme_bw()+
#theme_minimal()+
theme(plot.title = element_text(size = 20, face ="bold"),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = "CO2 emissions - (MTCO2)",
subtitle = paste("Parameter:", "emissCO2BySectorNoBio"),
x = "year",
y = " CO2 emissions - (MTCO2)")
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_grid(scenario~class1)+
theme_bw()+
scale_x_continuous(limits = c(2010, 2055), breaks = c(2015, 2050))+
#theme_minimal()+
theme(plot.title = element_text(size = 20, face ="bold"),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = "CO2 emissions - (MTCO2)",
subtitle = paste("Parameter:", "emissCO2BySectorNoBio"),
x = "year",
y = " CO2 emissions - (MTCO2)")
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_grid(scenario~class1)+
theme_bw()+
#theme_minimal()+
theme(plot.title = element_text(size = 20, face ="bold"),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = "CO2 emissions - (MTCO2)",
subtitle = paste("Parameter:", "emissCO2BySectorNoBio"),
x = "year",
y = " CO2 emissions - (MTCO2)")
