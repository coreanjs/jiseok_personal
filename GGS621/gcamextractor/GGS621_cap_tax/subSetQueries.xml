<?xml version="1.0"?>
<queries>
 <aQuery>
  <region name="South Korea"/>
  <supplyDemandQuery title="Final energy by detailed end-use sector and fuel">
   <axis1 name="sector">sector</axis1>
   <axis2 name="Year">demand-physical[@vintage]</axis2>
   <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or (exists(child::keyword/@final-energy)))]//*[@type='input' and not(contains(@name, 'trn') or @name='limestone' or @name='process heat cement' or @name='industrial energy use' or @name='industrial feedstocks' or @name='renewable' or @name='oil-credits')]/demand-physical[@unit='EJ']/node()</xPath>
   <comments/>
  </supplyDemandQuery>
 </aQuery>
 <aQuery>
  <supplyDemandQuery title="inputs by tech">
   <axis1 name="input">input</axis1>
   <axis2 name="Year">demand-physical[@vintage]</axis2>
   <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']/*[@type='technology']/*[@type='input']/demand-physical/node()</xPath>
   <comments/>
  </supplyDemandQuery>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <supplyDemandQuery title="elec gen by gen tech and cooling tech">
   <axis1 name="technology">technology</axis1>
   <axis2 name="Year">physical-output[@vintage]</axis2>
   <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='elect_td_bld' or
                  contains(@name,'elec_')) and not(contains(@name, 'water_td'))]/
                  *[@type='subsector' and not (@name='elect_td_bld')]/
                  *[@type='technology' and not(@name='biomass (conv)' or @name='biomass (conv CCS)' or @name='biomass (IGCC)' or @name='biomass (IGCC CCS)'
                                   or @name='coal (conv pul)' or @name='coal (conv pul CCS)' or @name='coal (IGCC)' or @name='coal (IGCC CCS)'
                                   or @name='gas (steam/CT)' or @name='gas (CC)' or @name='gas (CC CCS)'
                                   or @name='refined liquids (steam/CT)' or @name='refined liquids (CC)' or @name='refined liquids (CC CCS)'
                                   or @name='geothermal' or @name='Gen_II_LWR' or @name='Gen_III'
                                   or @name='CSP' or @name='CSP_storage')]/
                  *[@type='output']/physical-output/node()</xPath>
   <comments/>
   <labelRewriteList append-values="false">
    <level name="sector">
     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
     <rewrite from="elec_coal (conv pul)" to="electricity"/>
     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
     <rewrite from="elec_gas (CC)" to="electricity"/>
     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
     <rewrite from="elec_CSP" to="electricity"/>
     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
     <rewrite from="elec_Gen_III" to="electricity"/>
     <rewrite from="elec_geothermal" to="electricity"/>
     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
     <rewrite from="elec_biomass (conv)" to="electricity"/>
     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
     <rewrite from="elec_coal (IGCC)" to="electricity"/>
     <rewrite from="elec_CSP_storage" to="electricity"/>
    </level>
    <level name="subsector">
     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
     <rewrite from="biomass (IGCC)" to="biomass"/>
     <rewrite from="coal (IGCC CCS)" to="coal"/>
     <rewrite from="CSP" to="solar"/>
     <rewrite from="Gen_III" to="nuclear"/>
     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
     <rewrite from="gas (CC)" to="gas"/>
     <rewrite from="Gen_II_LWR" to="nuclear"/>
     <rewrite from="coal (conv pul CCS)" to="coal"/>
     <rewrite from="biomass (conv)" to="biomass"/>
     <rewrite from="gas (steam/CT)" to="gas"/>
     <rewrite from="coal (conv pul)" to="coal"/>
     <rewrite from="gas (CC CCS)" to="gas"/>
     <rewrite from="refined liquids (CC)" to="refined liquids"/>
     <rewrite from="coal (IGCC)" to="coal"/>
     <rewrite from="biomass (conv CCS)" to="biomass"/>
     <rewrite from="CSP_storage" to="solar"/>
     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
    </level>
   </labelRewriteList>
  </supplyDemandQuery>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <supplyDemandQuery title="elec consumption by demand sector">
   <axis1 name="sector">sector</axis1>
   <axis2 name="Year">demand-physical[@vintage]</axis2>
   <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector']//*[@type='input' and (@name='elect_td_bld' or
               @name='elect_td_ind' or @name='elect_td_trn')]/
               demand-physical/node()</xPath>
   <comments/>
  </supplyDemandQuery>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <supplyDemandQuery title="Land Use Change Emission (future)">
   <axis1 name="land-use-change-emission">LandLeaf</axis1>
   <axis2 name="Year">land-use-change-emission[@year]</axis2>
   <xPath buildList="true" dataName="land-use-change-emission" group="false" sumAll="true">/LandNode[@name='root' or @type='LandNode' (: collapse :)]//land-use-change-emission[@year&gt;1975]/text()</xPath>
   <comments/>
  </supplyDemandQuery>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <supplyDemandQuery title="transport service output by mode">
   <axis1 name="mode">subsector</axis1>
   <axis2 name="Year">physical-output[@vintage]</axis2>
   <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']//*[@type='output' (:collapse:) and not(@name='CAFEcredit')]/
               physical-output/node()</xPath>
   <comments/>
  </supplyDemandQuery>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <supplyDemandQuery title="transport service output by tech (new)">
   <axis1 name="technology">technology</axis1>
   <axis2 name="Year">physical-output[@vintage]</axis2>
   <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:) and not (@name='CAFEcredit')]/
               physical-output[@vintage=parent::*/parent::*/@year]/node()</xPath>
   <comments/>
  </supplyDemandQuery>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <supplyDemandQuery title="transport service output by tech">
   <axis1 name="technology">technology</axis1>
   <axis2 name="Year">physical-output[@vintage]</axis2>
   <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:) and not (@name='CAFEcredit')]/
               physical-output/node()</xPath>
   <comments/>
  </supplyDemandQuery>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <supplyDemandQuery title="CO2 emissions by sector (no bio)">
   <axis1 name="sector">sector[@name]</axis1>
   <axis2 name="Year">emissions[@year]</axis2>
   <xPath buildList="true" dataName="input" group="false" sumAll="false">
    <![CDATA[
    declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
            let $scn := $parent/ancestor::scenario,
            $rgn := $parent (: /ancestor::region :)
            return
            document { element scenario {
            $scn/@*,
            element region {
            $rgn/@*,
            $append
            }
            }
            }
            (: I can get by with just the scenario and region
            let $new_node := element {local-name($parent)} {$parent/@*, $append}
            return
            if(local-name($parent) != 'scenario')
            then local:append-heirarchy($parent/parent::*, $new_node)
            else document { $new_node } :)
            };
            declare function local:get-carbon-coef($good as xs:string) as xs:decimal {
            let $carbonCoefs := (
            <PrimaryFuelCO2Coef name="biomass">0</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="crude oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered biomass">23</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="gas pipeline">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="gas processing">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="limestone">0.08</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="natural gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refined liquids enduse">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refined liquids industrial">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refining">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional biomass">23</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional biomassOil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional corn for ethanol">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional natural gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional sugar for ethanol">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="traded unconventional oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="unconventional oil">21.1</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="unconventional oil production">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="wholesale gas">14.2</PrimaryFuelCO2Coef>),
            $currCoef := $carbonCoefs[@name=$good]/text()
            return if(exists($currCoef)) then $currCoef else 0.0
            };


            declare function local:is-carbonatious-fuel($good as xs:string) as xs:boolean {
            not(local:get-carbon-coef($good) = 0.0)
            };
            declare function local:generate-sector-output-coefs($inputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
            if(empty($inputNameQueue)) then $coefs
            else if( exists($coefs[@name = $inputNameQueue[1]]) or exists(index-of(('traded unconventional oil'),
            $inputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$inputNameQueue[1]]) or not(local:is-carbonatious-fuel($inputNameQueue[1])))
            then
            local:generate-sector-output-coefs(remove($inputNameQueue, 1), $currTree, $coefs, $is_usa)
            else
            let $inputName := $inputNameQueue[1],
            $newInputNameQueue := remove($inputNameQueue, 1),
            $useInputs := $currTree//*[@type='input' and @name=$inputName],
            $useSectors := distinct-values($useInputs/ancestor::*[@type='sector']/@name),
            $totalInputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage)
            return element input {
            attribute vintage { $vintage },
            text {
            sum($useInputs/demand-physical[@vintage=$vintage])
            }
            },
            $new_coefs := if(empty($useSectors)) then
            $coefs
            else
            $coefs | element sector {
            attribute name { $inputName },
            for $output in $useSectors
            return element output {
            attribute name { $output },
            for $inputSum in $totalInputSum
            let $currSectorInputs := $useInputs[ancestor::*[@type='sector' and @name=$output]],
            $outputSum := sum($currSectorInputs/demand-physical[@vintage=$inputSum/@vintage]),
            $carbonIn := sum($currSectorInputs/parent::*//carbon-content[@vintage=$inputSum/@vintage]),
            $carbonOut := sum($currSectorInputs/parent::*/output-primary/physical-output[@vintage=$inputSum/@vintage]) *
            local:get-carbon-coef($output)
            return (element share {
            attribute vintage { $inputSum/@vintage },
            text { $outputSum div $inputSum }
            }, element carbon_ratio {
            attribute vintage { $inputSum/@vintage },
            text{ if($carbonIn > 0) then $carbonOut div $carbonIn else 0 }
            })
            }
            }
            return
            local:generate-sector-output-coefs(distinct-values(($newInputNameQueue, $useSectors)), $currTree, $new_coefs, $is_usa)
            };
            declare function local:apply-coefs($outputName as xs:string, $emissions as node()*, $coefs as node()*) as node()* {
            if(exists($coefs[@name=$outputName]) and abs(sum($emissions)) > 0.001) then
            for $output in $coefs[@name=$outputName]/output
            let $emiss_go := for $year in distinct-values($emissions/@year)
            let $emissThisVintage := $emissions[@year=$year],
            $firstEmiss := $emissThisVintage[1],
            $emissSum := sum($emissThisVintage),
            $shareThisVintage := $output/share[@vintage=$year],
            $carbonRatioThisVintage := $output/carbon_ratio[@vintage=$year],
            $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage
            where $coefThisVintage > 0
            return element { local-name($firstEmiss) } {
            $firstEmiss/@*,
            text{ $emissSum * $coefThisVintage }
            },
            $emiss_stay := for $year in distinct-values($emissions/@year)
            let $emissThisVintage := $emissions[@year=$year],
            $firstEmiss := $emissThisVintage[1],
            $emissSum := sum($emissThisVintage),
            $shareThisVintage := $output/share[@vintage=$year],
            $carbonRatioThisVintage := 1.0 - $output/carbon_ratio[@vintage=$year],
            $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage
            where $coefThisVintage > 0
            return element { local-name($firstEmiss) } {
            $firstEmiss/@*,
            text{ $emissSum * $coefThisVintage }
            }
            return local:apply-coefs($output/@name, $emiss_go, $coefs) |
            element sector {
            attribute name { $output/@name},
            attribute type { 'sector' },
            $emiss_stay
            }
            else if( abs(sum($emissions)) > 0.001) then
            element sector {
            attribute name { $outputName },
            attribute type { 'sector' },
            $emissions
            }
            else
            (: These are the residuals from chasing simulenaties, I've left this here
            for debuging purposes :)
            element sector {
            attribute name { $outputName },
            attribute type { 'sector' }(:,
            $emissions:)
            }
            };
            declare function local:run-emiss-by-enduse($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* {
            (:unordered { :)
            let $regionsG := if(not($regions[1] = 'Global'))
            then $regions
            else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
            return
            for $scenario in $scenarios,
            $region in $regionsG
            let $scenario_split := tokenize($scenario, ' '),
            $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
            $sector_emiss := $currTree/*[@type='sector' and not(@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol')]//CO2[@type='GHG' (:collapse:) and @name='CO2']/emissions/text(),
            $currEmissSectors := $currTree/*[@type='sector' and (@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol')],
            $coefs := local:generate-sector-output-coefs(distinct-values($currEmissSectors/@name), $currTree, (), false()),
            $downstream_emiss := for $sectorName in distinct-values($currEmissSectors/@name)
            return local:append-heirarchy($currTree, local:apply-coefs($sectorName, $currEmissSectors[@name=$sectorName]//CO2[@name='CO2']/emissions, $coefs))//text()
            return ($sector_emiss, $downstream_emiss )
            (:  } :)
            };
            local:run-emiss-by-enduse((:scenarios:), (:regions:), (:collection:))    ]]>
   </xPath>
   <comments/>
   <labelRewriteList append-values="false">
    <level name="sector">
     <rewrite from="elec_coal (conv pul)" to="electricity"/>
     <rewrite from="elec_gas (CC)" to="electricity"/>
     <rewrite from="elec_CSP" to="electricity"/>
     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
     <rewrite from="elec_Gen_III" to="electricity"/>
     <rewrite from="elec_geothermal" to="electricity"/>
     <rewrite from="elec_biomass (conv)" to="electricity"/>
     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
     <rewrite from="elec_coal (IGCC)" to="electricity"/>
     <rewrite from="elec_CSP_storage" to="electricity"/>
    </level>
   </labelRewriteList>
  </supplyDemandQuery>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <emissionsQueryBuilder title="nonCO2 emissions by resource production">
   <axis1 name="GHG">GHG</axis1>
   <axis2 name="Year">emissions</axis2>
   <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'resource']//*[@type = 'GHG']/emissions/node()</xPath>
   <comments/>
  </emissionsQueryBuilder>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <emissionsQueryBuilder title="nonCO2 emissions by sector">
   <axis1 name="GHG">GHG</axis1>
   <axis2 name="Year">emissions</axis2>
   <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector']//*[@type = 'GHG']/emissions/node()</xPath>
   <comments/>
  </emissionsQueryBuilder>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <emissionsQueryBuilder title="nonCO2 emissions by subsector">
   <axis1 name="GHG">GHG</axis1>
   <axis2 name="Year">emissions</axis2>
   <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector']/*[@type = 'subsector']//
            *[@type = 'GHG']/emissions/node()</xPath>
   <comments/>
  </emissionsQueryBuilder>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <emissionsQueryBuilder title="CO2 emissions by sector">
   <axis1 name="sector">sector</axis1>
   <axis2 name="Year">emissions</axis2>
   <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type='sector']//CO2/emissions/node()</xPath>
   <comments/>
  </emissionsQueryBuilder>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <emissionsQueryBuilder title="CO2 emissions by subsector">
   <axis1 name="subsector">subsector</axis1>
   <axis2 name="Year">emissions</axis2>
   <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]/*[@type='subsector']//CO2/emissions/node()</xPath>
   <comments/>
  </emissionsQueryBuilder>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <emissionsQueryBuilder title="CO2 sequestration by sector">
   <axis1 name="sector">sector</axis1>
   <axis2 name="Year">emissions-sequestered</axis2>
   <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]//CO2/emissions-sequestered/node()</xPath>
   <comments/>
  </emissionsQueryBuilder>
 </aQuery>
 <aQuery>
  <region name="AK"/>
  <region name="AL"/>
  <region name="AR"/>
  <region name="AZ"/>
  <region name="CA"/>
  <region name="CO"/>
  <region name="CT"/>
  <region name="DC"/>
  <region name="DE"/>
  <region name="FL"/>
  <region name="GA"/>
  <region name="HI"/>
  <region name="IA"/>
  <region name="ID"/>
  <region name="IL"/>
  <region name="IN"/>
  <region name="KS"/>
  <region name="KY"/>
  <region name="LA"/>
  <region name="MA"/>
  <region name="MD"/>
  <region name="ME"/>
  <region name="MI"/>
  <region name="MN"/>
  <region name="MO"/>
  <region name="MS"/>
  <region name="MT"/>
  <region name="NC"/>
  <region name="ND"/>
  <region name="NE"/>
  <region name="NH"/>
  <region name="NJ"/>
  <region name="NM"/>
  <region name="NV"/>
  <region name="NY"/>
  <region name="OH"/>
  <region name="OK"/>
  <region name="OR"/>
  <region name="PA"/>
  <region name="RI"/>
  <region name="SC"/>
  <region name="SD"/>
  <region name="TN"/>
  <region name="TX"/>
  <region name="UT"/>
  <region name="VA"/>
  <region name="VT"/>
  <region name="WA"/>
  <region name="WI"/>
  <region name="WV"/>
  <region name="WY"/>
  <region name="Alaska grid"/>
  <region name="California grid"/>
  <region name="Central East grid"/>
  <region name="Central Northeast grid"/>
  <region name="Central Northwest grid"/>
  <region name="Central Southwest grid"/>
  <region name="Florida grid"/>
  <region name="Hawaii grid"/>
  <region name="Mid-Atlantic grid"/>
  <region name="New England grid"/>
  <region name="New York grid"/>
  <region name="Northwest grid"/>
  <region name="Southeast grid"/>
  <region name="Southwest grid"/>
  <region name="Texas grid"/>
  <supplyDemandQuery title="elec gen by segment (grid level)">
   <axis1 name="segment">segment-production[@segment]</axis1>
   <axis2 name="Year">dispatch[@year]</axis2>
   <xPath buildList="true" dataName="generation" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and (@name='electricity')]/dispatch/segment-production/node()</xPath>
   <comments/>
  </supplyDemandQuery>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <supplyDemandQuery title="hydrogen production by tech">
   <axis1 name="technology">technology</axis1>
   <axis2 name="Year">physical-output[@vintage]</axis2>
   <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='H2 central production' or @name='H2 wholesale dispensing' or @name='H2 industrial')]/
               *[@type='subsector' and not (@name='H2 delivery')]/*[@type='technology']/*[@type='output' (:collapse:)]/
               physical-output/node()</xPath>
   <comments/>
  </supplyDemandQuery>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <supplyDemandQuery title="hydrogen utilization by technology">
   <axis1 name="input">input</axis1>
   <axis2 name="Year">demand-physical[@vintage]</axis2>
   <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/
               *[@type='subsector']/*[@type='technology']/*[@type='input' and contains(@name,'H2')]/
               demand-physical/node()</xPath>
   <comments/>
  </supplyDemandQuery>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <supplyDemandQuery title="hydrogen inputs by tech">
   <axis1 name="fuel">input</axis1>
   <axis2 name="Year">demand-physical[@vintage]</axis2>
   <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and contains(@name,'H2')]/
               *[@type='subsector']/*[@type='technology']/*[@type='input']/
               demand-physical/node()</xPath>
   <comments/>
  </supplyDemandQuery>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <supplyDemandQuery title="hydrogen prices by sector">
   <axis1 name="fuel">sector</axis1>
   <axis2 name="Year">cost</axis2>
   <xPath buildList="true" dataName="price" group="false" sumAll="false">*[@type='sector' and contains(@name,'H2')]/cost/text()</xPath>
   <comments/>
  </supplyDemandQuery>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <supplyDemandQuery title="hydrogen costs by tech">
   <axis1 name="technology">technology</axis1>
   <axis2 name="Year">cost</axis2>
   <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and contains(@name,'H2')]/
               *[@type='subsector']/*[@type='technology']/cost/text()</xPath>
   <comments/>
  </supplyDemandQuery>
 </aQuery>
 <aQuery>
  <region name="South Korea"/>
  <supplyDemandQuery title="hydrogen outputs by technology">
   <axis1 name="technology">technology</axis1>
   <axis2 name="Year">physical-output[@vintage]</axis2>
   <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and contains(@name,'H2')]/
               *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:)]/
               physical-output/node()</xPath>
   <comments/>
  </supplyDemandQuery>
 </aQuery>
</queries>
