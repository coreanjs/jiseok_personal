ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()+
facet_wrap(~class)+
scale_x_continuous(limits = c(2010, 2055), breaks = c(2015, 2050))+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 20, face ="bold"),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = unit_param_selected,
subtitle = paste("Parameter:", i),
x = "year",
y = unit_param_selected)
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/img_aggParam")
ggsave(plot =graph, file =paste0(i, ".png"),  width =1200, height = 700, units ="px", dpi = 150)
}
GGS621_cap_tax_test_error %>%
filter(param == i) %>%
distinct(units)->unit_param_selected
unit_param_selected
GGS621_cap_tax_test_error %>%
filter(param == i) %>%
ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()
GGS621_cap_tax_test_error %>%
filter(param == i) %>%
ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()+
facet_wrap(~class)
GGS621_cap_tax_test_error
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/GGS621_cap_tax_test")
aggParam<-read.csv('gcamDataTable_aggClass1.csv') %>%
filter(region == "South Korea")
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/GGS621_cap_tax_test")
aggParam<-read.csv('gcamDataTable_aggClass1.csv') %>%
filter(region == "South Korea")
unique(aggParam$region)
unique(aggParam$param)
str(aggParam)
unique(aggParam$param) ->aggParam_all
i <-aggParam_all[1]
i
for (i in aggParam_all) {
aggParam %>%
filter(param == i) %>%
distinct(units)->unit_param_selected
unit_param_selected
graph =  aggParam %>%
filter(param == i) %>%
ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()+
facet_wrap(~class)+
scale_x_continuous(limits = c(2010, 2055), breaks = c(2015, 2050))+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 20, face ="bold"),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = unit_param_selected,
subtitle = paste("Parameter:", i),
x = "year",
y = unit_param_selected)
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/img_aggParam")
ggsave(plot =graph, file =paste0(i, ".png"),  width =1200, height = 700, units ="px", dpi = 150)
}
unique(aggParam$param) ->aggParam_all
aggParam_all
### Import NZ2050
GGS621_cap_tax <- gcamextractor::readgcam(gcamdatabase = "E:/gcam-v7.0-Windows-Release-Package_GGS621/output/database_basexdb",
paramsSelect = c(#"energy" ## energy 오류 남
"electricity",
"transport",
"building",
"emissions",
"hydrogen",
"energyPrimaryByFuelEJ",
"energyPrimaryRefLiqProdEJ",
"energyFinalConsumBySecEJ",
"energyFinalByFuelEJ",
"energyFinalSubsecByFuelTranspEJ",
"energyFinalSubsecByFuelBuildEJ",
"energyFinalSubsecByFuelIndusEJ",
"energyFinalSubsecBySectorBuildEJ",
"energyPrimaryByFuelMTOE",
"energyPrimaryRefLiqProdMTOE",
"energyFinalConsumBySecMTOE",
"energyFinalbyFuelMTOE",
"energyFinalSubsecByFuelTranspMTOE",
"energyFinalSubsecByFuelBuildMTOE",
"energyFinalSubsecByFuelIndusMTOE",
"energyFinalSubsecBySectorBuildMTOE",
"energyPrimaryByFuelTWh",
"energyPrimaryRefLiqProdTWh",
"energyFinalConsumBySecTWh",
"energyFinalbyFuelTWh",
"energyFinalSubsecByFuelTranspTWh",
"energyFinalSubsecByFuelBuildTWh",
"energyFinalSubsecByFuelIndusTWh",
"energyFinalSubsecBySectorBuildTWh"
), ### this is a key
regionsSelect = c("South Korea"),
folder = "gcamextractor/GGS621_cap_tax")
setwd("C:/R/Rproject/jiseok_personal/GGS621")
### Import NZ2050
GGS621_cap_tax <- gcamextractor::readgcam(gcamdatabase = "E:/gcam-v7.0-Windows-Release-Package_GGS621/output/database_basexdb",
paramsSelect = c(#"energy" ## energy 오류 남
"electricity",
"transport",
"building",
"emissions",
"hydrogen",
"energyPrimaryByFuelEJ",
"energyPrimaryRefLiqProdEJ",
"energyFinalConsumBySecEJ",
"energyFinalByFuelEJ",
"energyFinalSubsecByFuelTranspEJ",
"energyFinalSubsecByFuelBuildEJ",
"energyFinalSubsecByFuelIndusEJ",
"energyFinalSubsecBySectorBuildEJ",
"energyPrimaryByFuelMTOE",
"energyPrimaryRefLiqProdMTOE",
"energyFinalConsumBySecMTOE",
"energyFinalbyFuelMTOE",
"energyFinalSubsecByFuelTranspMTOE",
"energyFinalSubsecByFuelBuildMTOE",
"energyFinalSubsecByFuelIndusMTOE",
"energyFinalSubsecBySectorBuildMTOE",
"energyPrimaryByFuelTWh",
"energyPrimaryRefLiqProdTWh",
"energyFinalConsumBySecTWh",
"energyFinalbyFuelTWh",
"energyFinalSubsecByFuelTranspTWh",
"energyFinalSubsecByFuelBuildTWh",
"energyFinalSubsecByFuelIndusTWh",
"energyFinalSubsecBySectorBuildTWh"
), ### this is a key
regionsSelect = c("South Korea"),
folder = "gcamextractor/GGS621_cap_tax")
GGS621_cap_tax
### CO2 sequestration by sector --> NA
GGS_621_data<- GGS621_cap_tax$dataAll %>%
mutate(param = ifelse(is.na(param),origQuery, param),
scenario = factor(scenario, levels = c('Reference', 'cap', 'tax')))
str(GGS_621_data)
##What's in parameter
unique(GGS_621_data$param)
unique(GGS_621_data$param)
unique(GGS_621_data$param)
unique(GGS_621_data$param)[2] -> param_selected
param_selected
GGS_621_data %>%
filter(param == param_selected) %>%
distinct(units)->unit_param_selected
unit_param_selected
GGS_621_data %>%
filter(param == param_selected) %>%
distinct(origQuery) ->origQuery
getwd()
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/GGS621_cap_tax")
#### aggParam.csv
aggParam<-read.csv('gcamDataTable_aggParam.csv')
unique(aggParam$param)
aggParam %>%
filter(region =="Global" & param == "emissCO2BySector") %>%
ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()+
gghighlight()
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/GGS621_cap_tax")
aggParam<-read.csv('gcamDataTable_aggClass1.csv') %>%
filter(region == "South Korea")
unique(aggParam$region)
unique(aggParam$param)
unique(aggParam$region)
unique(aggParam$param)
unique(aggParam$region)
aggParam %>%
filter(is.na(param))
unique(aggParam$region)
unique(aggParam$param)
aggParam %>%
filter(param == "emissCO2BySector") %>%
ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()+
facet_wrap(~class)
aggParam %>%
filter(param == "emissCO2BySector") %>%
ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()+
facet_wrap(~class)
unique(aggParam$param) ->aggParam_all
aggParam_all
i <-aggParam_all[1]
aggParam %>%
filter(param == i) %>%
ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()+
facet_wrap(~class)
i
aggParam %>%
filter(param == i) %>%
ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()+
facet_wrap(~class)
str(aggParam)
unique(aggParam$param) ->aggParam_all
i
aggParam_all
for (i in aggParam_all) {
aggParam %>%
filter(param == i) %>%
distinct(units)->unit_param_selected
unit_param_selected
graph =  aggParam %>%
filter(param == i) %>%
ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()+
facet_wrap(~class)+
scale_x_continuous(limits = c(2010, 2055), breaks = c(2015, 2050))+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 20, face ="bold"),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = unit_param_selected,
subtitle = paste("Parameter:", i),
x = "year",
y = unit_param_selected)
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/img_aggParam")
ggsave(plot =graph, file =paste0(i, ".png"),  width =1200, height = 700, units ="px", dpi = 150)
}
GGS621_cap_tax_test_error <- gcamextractor::readgcam(gcamdatabase = "E:/gcam-v7.0-Windows-Release-Package_GGS621/output/database_basexdb",
paramsSelect = c(  "energyPrimaryByFuelEJ",
"energyPrimaryRefLiqProdEJ",
"energyFinalConsumBySecEJ",
"energyFinalByFuelEJ",
"energyFinalSubsecByFuelTranspEJ",
"energyFinalSubsecByFuelBuildEJ",
"energyFinalSubsecByFuelIndusEJ",
"energyFinalSubsecBySectorBuildEJ",
"energyPrimaryByFuelMTOE",
"energyPrimaryRefLiqProdMTOE",
"energyFinalConsumBySecMTOE",
"energyFinalbyFuelMTOE",
"energyFinalSubsecByFuelTranspMTOE",
"energyFinalSubsecByFuelBuildMTOE",
"energyFinalSubsecByFuelIndusMTOE",
"energyFinalSubsecBySectorBuildMTOE",
"energyPrimaryByFuelTWh",
"energyPrimaryRefLiqProdTWh",
"energyFinalConsumBySecTWh",
"energyFinalbyFuelTWh",
"energyFinalSubsecByFuelTranspTWh",
"energyFinalSubsecByFuelBuildTWh",
"energyFinalSubsecByFuelIndusTWh",
"energyFinalSubsecBySectorBuildTWh"
), ### this is a key
regionsSelect = c("South Korea"),
folder = "gcamextractor/GGS621_cap_tax_test")
GGS621_cap_tax_test_error
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/GGS621_cap_tax_test")
aggParam<-read.csv('gcamDataTable_aggClass1.csv') %>%
filter(region == "South Korea")
aggParam %>%
filter(is.na(param))
unique(aggParam$region)
unique(aggParam$param)
aggParam %>%
filter(param == "emissCO2BySector") %>%
ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()+
facet_wrap(~class)
aggParam %>%
filter(param == "emissCO2BySector")
####### Image create using function
dir.create("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/img_aggParam")
is.na(unique(aggParam$param))
str(aggParam)
unique(aggParam$param) ->aggParam_all
aggParam_all
i <-aggParam_all[1]
i
for (i in aggParam_all) {
aggParam %>%
filter(param == i) %>%
distinct(units)->unit_param_selected
unit_param_selected
graph =  aggParam %>%
filter(param == i) %>%
ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()+
facet_wrap(~class)+
scale_x_continuous(limits = c(2010, 2055), breaks = c(2015, 2050))+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 20, face ="bold"),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = unit_param_selected,
subtitle = paste("Parameter:", i),
x = "year",
y = unit_param_selected)
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/img_aggParam")
ggsave(plot =graph, file =paste0(i, ".png"),  width =1200, height = 700, units ="px", dpi = 150)
}
decarb_two_regions <- gcamextractor::readgcam(gcamdatabase = "E:/gcam-v7.0-Windows-Release-Package_GGS621/output/database_basexdb",
paramsSelect = c(
"emissions"
), ### this is a key
regionsSelect = c("South Korea", "Japan"),
folder = "gcamextractor/GGS621_cap_tax_two_regions")
setwd("C:/R/Rproject/jiseok_personal/GGS621")
decarb_two_regions <- gcamextractor::readgcam(gcamdatabase = "E:/gcam-v7.0-Windows-Release-Package_GGS621/output/database_basexdb",
paramsSelect = c(
"emissions"
), ### this is a key
regionsSelect = c("South Korea", "Japan"),
folder = "gcamextractor/GGS621_cap_tax_two_regions")
decarb_two_regions
decarb_two_regions$dataAggParam
unique(decarb_two_regions$region)
unique(decarb_two_regions$dataAggParam$region)
unique(decarb_two_regions$dataAggParam$region)
decarb_two_regions$dataAggParam %>%
filter(region = c('South Korea', 'Japan'))
decarb_two_regions$dataAggParam %>%
filter(region %in% c('South Korea', 'Japan'))
decarb_two_regions$dataAggParam %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySector")
decarb_two_regions$dataAggParam %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySector") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_lint(~scenario)
decarb_two_regions$dataAggParam %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySector") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line(~scenario)
decarb_two_regions$dataAggParam %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySector") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line(~scenario)
decarb_two_regions$dataAggParam %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySector") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_wrap(~scenario)
decarb_two_regions$dataAggParam %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySector") %>%
ggplot(aes(x = x, y = value, group = scenario color = scenario))+
decarb_two_regions$dataAggParam %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySector") %>%
ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()+
facet_wrap(~region)
decarb_two_regions$dataAggParam %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySector")
decarb_two_regions$dataAggParam %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySector") %>% View()
unique(decarb_two_regions$dataAggClass1$region)
decarb_two_regions$dataAggParam %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySector") %>% View()
unique(decarb_two_regions$dataAggClass1$region)
unique(decarb_two_regions$dataAggClass1$param)
decarb_two_regions$dataAggParam %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>% View()
unique(decarb_two_regions$dataAll$param)
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>% View()
ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()+
facet_wrap(region~class1)
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()+
facet_wrap(region~class1)
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_wrap(scenario~class1)
aggParam<- decarb_two_regions$dataAll
unique(aggParam$param)
complete.case(unique(aggParam$param))
unique(aggParam$param)[-10] ->aggParam_all
aggParam_all
for (i in aggParam_all) {
aggParam %>%
filter(param == i) %>%
distinct(units)->unit_param_selected
unit_param_selected
graph =  aggParam %>%
filter(param == i) %>%
ggplot(aes(x = x, y = value, group = scenario, color = scenario))+
geom_line()+
facet_wrap(~class)+
scale_x_continuous(limits = c(2010, 2055), breaks = c(2015, 2050))+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 20, face ="bold"),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = unit_param_selected,
subtitle = paste("Parameter:", i),
x = "year",
y = unit_param_selected)
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/img_two_regions")
ggsave(plot =graph, file =paste0(i, ".png"),  width =1200, height = 700, units ="px", dpi = 150)
}
for (i in aggParam_all) {
aggParam %>%
filter(param == i) %>%
distinct(units)->unit_param_selected
unit_param_selected
graph =  aggParam %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_wrap(scenario~class1)
scale_x_continuous(limits = c(2010, 2055), breaks = c(2015, 2050))+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 20, face ="bold"),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = unit_param_selected,
subtitle = paste("Parameter:", i),
x = "year",
y = unit_param_selected)
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/img_two_regions")
ggsave(plot =graph, file =paste0(i, ".png"),  width =1200, height = 700, units ="px", dpi = 150)
}
for (i in aggParam_all) {
aggParam %>%
filter(param == i) %>%
distinct(units)->unit_param_selected
unit_param_selected
graph =  aggParam %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_wrap(scenario~class1)+
scale_x_continuous(limits = c(2010, 2055), breaks = c(2015, 2050))+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 20, face ="bold"),
strip.text.x  = element_text(size=12),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title.position =  "plot")+
labs(title = unit_param_selected,
subtitle = paste("Parameter:", i),
x = "year",
y = unit_param_selected)
setwd("C:/R/Rproject/jiseok_personal/GGS621/gcamextractor/img_two_regions")
ggsave(plot =graph, file =paste0(i, ".png"),  width =1200, height = 700, units ="px", dpi = 150)
}
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_wrap(scenario~class1)
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%View()
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_wrap(scenario~class1)+
labs(title ="CO2 emissions - (MTCO2)")
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_wrap(scenario~class1)+
labs(title ="CO2 emissions - (MTCO2)")
decarb_two_regions$dataAll %>%
filter(region %in% c('South Korea', 'Japan') & param == "emissCO2BySectorNoBio") %>%
ggplot(aes(x = x, y = value, group = region, color = region))+
geom_line()+
facet_grid(scenario~class1)+
labs(title ="CO2 emissions - (MTCO2)")
